/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/images/combinedImage.png":
/*!**************************************!*\
  !*** ./src/images/combinedImage.png ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + \"677d49ceb3a858702cb19a76044cb24f.png\");\n\n//# sourceURL=webpack://cellular-redstone/./src/images/combinedImage.png?");

/***/ }),

/***/ "./node_modules/pako/index.js":
/*!************************************!*\
  !*** ./node_modules/pako/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Top level file is just a mixin of submodules & constants\n\n\nconst { Deflate, deflate, deflateRaw, gzip } = __webpack_require__(/*! ./lib/deflate */ \"./node_modules/pako/lib/deflate.js\");\n\nconst { Inflate, inflate, inflateRaw, ungzip } = __webpack_require__(/*! ./lib/inflate */ \"./node_modules/pako/lib/inflate.js\");\n\nconst constants = __webpack_require__(/*! ./lib/zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = ungzip;\nmodule.exports.constants = constants;\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/index.js?");

/***/ }),

/***/ "./node_modules/pako/lib/deflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/deflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"./node_modules/pako/lib/zlib/deflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = zlib_deflate.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = zlib_deflate.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    this.result = utils.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  const deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nmodule.exports.Deflate = Deflate;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateRaw = deflateRaw;\nmodule.exports.gzip = gzip;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/deflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/inflate.js":
/*!******************************************!*\
  !*** ./node_modules/pako/lib/inflate.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n\nconst zlib_inflate = __webpack_require__(/*! ./zlib/inflate */ \"./node_modules/pako/lib/zlib/inflate.js\");\nconst utils        = __webpack_require__(/*! ./utils/common */ \"./node_modules/pako/lib/utils/common.js\");\nconst strings      = __webpack_require__(/*! ./utils/strings */ \"./node_modules/pako/lib/utils/strings.js\");\nconst msg          = __webpack_require__(/*! ./zlib/messages */ \"./node_modules/pako/lib/zlib/messages.js\");\nconst ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"./node_modules/pako/lib/zlib/zstream.js\");\nconst GZheader     = __webpack_require__(/*! ./zlib/gzheader */ \"./node_modules/pako/lib/zlib/gzheader.js\");\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  this.options = utils.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  let status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = zlib_inflate.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      zlib_inflate.inflateReset(strm);\n      status = zlib_inflate.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = zlib_inflate.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  const inflator = new Inflate(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || msg[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nmodule.exports.Inflate = Inflate;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateRaw = inflateRaw;\nmodule.exports.ungzip = inflate;\nmodule.exports.constants = __webpack_require__(/*! ./zlib/constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/inflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/utils/common.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/utils/common.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nmodule.exports.assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nmodule.exports.flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/utils/common.js?");

/***/ }),

/***/ "./node_modules/pako/lib/utils/strings.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/utils/strings.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("// String encode/decode helpers\n\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/utils/strings.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/adler32.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/adler32.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nmodule.exports = adler32;\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/adler32.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/pako/lib/zlib/constants.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/constants.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/crc32.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/crc32.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nmodule.exports = crc32;\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/crc32.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/deflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/deflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = __webpack_require__(/*! ./trees */ \"./node_modules/pako/lib/zlib/trees.js\");\nconst adler32 = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32   = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst msg     = __webpack_require__(/*! ./messages */ \"./node_modules/pako/lib/zlib/messages.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,\n  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,\n  Z_UNKNOWN,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = msg[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH) ||\n                        flush === Z_NO_FLUSH ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH && flush !== Z_FINISH &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH) && flush !== Z_NO_FLUSH &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR;\n  }\n  strm.state.gzhead = head;\n  return Z_OK;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n};\n\n\n/* ========================================================================= */\nconst deflate = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n};\n\n\nmodule.exports.deflateInit = deflateInit;\nmodule.exports.deflateInit2 = deflateInit2;\nmodule.exports.deflateReset = deflateReset;\nmodule.exports.deflateResetKeep = deflateResetKeep;\nmodule.exports.deflateSetHeader = deflateSetHeader;\nmodule.exports.deflate = deflate;\nmodule.exports.deflateEnd = deflateEnd;\nmodule.exports.deflateSetDictionary = deflateSetDictionary;\nmodule.exports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/deflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/gzheader.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/gzheader.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/gzheader.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inffast.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inffast.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD = 16209;       /* got a data error -- remain here until reset */\nconst TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/inffast.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inflate.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/inflate.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32       = __webpack_require__(/*! ./adler32 */ \"./node_modules/pako/lib/zlib/adler32.js\");\nconst crc32         = __webpack_require__(/*! ./crc32 */ \"./node_modules/pako/lib/zlib/crc32.js\");\nconst inflate_fast  = __webpack_require__(/*! ./inffast */ \"./node_modules/pako/lib/zlib/inffast.js\");\nconst inflate_table = __webpack_require__(/*! ./inftrees */ \"./node_modules/pako/lib/zlib/inftrees.js\");\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH, Z_BLOCK, Z_TREES,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,\n  Z_DEFLATED\n} = __webpack_require__(/*! ./constants */ \"./node_modules/pako/lib/zlib/constants.js\");\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n};\n\n\nmodule.exports.inflateReset = inflateReset;\nmodule.exports.inflateReset2 = inflateReset2;\nmodule.exports.inflateResetKeep = inflateResetKeep;\nmodule.exports.inflateInit = inflateInit;\nmodule.exports.inflateInit2 = inflateInit2;\nmodule.exports.inflate = inflate;\nmodule.exports.inflateEnd = inflateEnd;\nmodule.exports.inflateGetHeader = inflateGetHeader;\nmodule.exports.inflateSetDictionary = inflateSetDictionary;\nmodule.exports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/inflate.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/inftrees.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/inftrees.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nmodule.exports = inflate_table;\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/inftrees.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/messages.js":
/*!************************************************!*\
  !*** ./node_modules/pako/lib/zlib/messages.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/messages.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/trees.js":
/*!*********************************************!*\
  !*** ./node_modules/pako/lib/zlib/trees.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH    = 3;\nconst MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES       = 30;\n/* number of distance codes */\n\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nconst MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nmodule.exports._tr_init  = _tr_init;\nmodule.exports._tr_stored_block = _tr_stored_block;\nmodule.exports._tr_flush_block  = _tr_flush_block;\nmodule.exports._tr_tally = _tr_tally;\nmodule.exports._tr_align = _tr_align;\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/trees.js?");

/***/ }),

/***/ "./node_modules/pako/lib/zlib/zstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pako/lib/zlib/zstream.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n//# sourceURL=webpack://cellular-redstone/./node_modules/pako/lib/zlib/zstream.js?");

/***/ }),

/***/ "./src/blocks/air.ts":
/*!***************************!*\
  !*** ./src/blocks/air.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Air = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst concrete_powder_1 = __webpack_require__(/*! ./concrete_powder */ \"./src/blocks/concrete_powder.ts\");\nconst piston_head_1 = __webpack_require__(/*! ./piston_head */ \"./src/blocks/piston_head.ts\");\nclass Air {\n    type = block_1.BlockType.Air;\n    constructor({} = {}) { }\n    subupdate(position, blocks) {\n        for (const direction of (0, direction_1.getAllDirections)()) {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            const oppositeDirection = (0, direction_1.getOppositeDirection)(direction);\n            if ((0, block_1.isBlock)(neighbour, block_1.BlockType.Piston) &&\n                neighbour.direction === oppositeDirection &&\n                neighbour.isBeingPowered) {\n                return new piston_head_1.PistonHead({\n                    direction: neighbour.direction,\n                    isSticky: neighbour.isSticky\n                });\n            }\n            else if (\n            // TODO: check if instance of movable block\n            // TODO: add movement direction\n            (0, block_1.isMoveableBlock)(neighbour) &&\n                neighbour.getMovementMethod() === block_1.BlockMovement.Moveable &&\n                neighbour.movementDirection === oppositeDirection &&\n                neighbour.movement === block_1.Movement.Pending) {\n                return (0, create_block_1.createBlock)(neighbour.type, {\n                    ...neighbour,\n                    movement: block_1.Movement.Complete,\n                    movementDirection: oppositeDirection\n                });\n            }\n            else if (direction === direction_1.Direction.Up &&\n                (0, block_1.isBlock)(neighbour, block_1.BlockType.ConcretePowder) &&\n                neighbour.gravityMotion === concrete_powder_1.GravityMotion.Falling) {\n                return (0, create_block_1.createBlock)(neighbour.type, {\n                    ...neighbour,\n                    gravityMotion: concrete_powder_1.GravityMotion.Fallen\n                });\n            }\n        }\n        return new Air();\n    }\n    update(position, blocks) {\n        return new Air(this);\n    }\n    getTextureName() {\n        return '';\n    }\n    // public isOutputtingPower (): boolean {\n    //   return false\n    // }\n    getMovementMethod() {\n        return block_1.BlockMovement.Breaks;\n    }\n}\nexports.Air = Air;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.Air, Air);\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/air.ts?");

/***/ }),

/***/ "./src/blocks/button.ts":
/*!******************************!*\
  !*** ./src/blocks/button.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Button = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nclass Button {\n    type = block_1.BlockType.Button;\n    isOn;\n    delay;\n    constructor({ isOn = false, delay = 0 } = {}) {\n        this.isOn = isOn;\n        this.delay = delay;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n    update(position, blocks) {\n        const delay = Math.max(0, this.delay - 1);\n        const isOn = this.isOn && delay > 0;\n        return new Button({ ...this, isOn, delay });\n    }\n    subupdate(position, blocks) {\n        return new Button(this);\n    }\n    getTextureName() {\n        return `button_${this.isOn ? 'on' : 'off'}`;\n    }\n    getOutputPower(_direction) {\n        return this.isOn ? powerable_block_1.BinaryPower.Strong : powerable_block_1.BinaryPower.None;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Immovable;\n    }\n    doesConnectToRedstoneDust(_direction) {\n        return true;\n    }\n    interact() {\n        // 5 delay = 4 1 tick repeaters on\n        return new Button({ ...this, isOn: !this.isOn, delay: 5 });\n    }\n    filteredState() {\n        return (0, general_1.createObjectSubset)(this, [\n            'type',\n            'isOn'\n            // not delay\n        ]);\n    }\n}\nexports.Button = Button;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.Button, Button);\n(0, block_variants_1.addBlockVariant)(new Button({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/button.ts?");

/***/ }),

/***/ "./src/blocks/concrete_powder.ts":
/*!***************************************!*\
  !*** ./src/blocks/concrete_powder.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConcretePowder = exports.GravityMotion = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst air_1 = __webpack_require__(/*! ./air */ \"./src/blocks/air.ts\");\nconst wool_block_1 = __webpack_require__(/*! ./wool_block */ \"./src/blocks/wool_block.ts\");\nvar GravityMotion;\n(function (GravityMotion) {\n    GravityMotion[\"None\"] = \"none\";\n    GravityMotion[\"Falling\"] = \"falling\";\n    GravityMotion[\"Fallen\"] = \"fallen\";\n})(GravityMotion || (exports.GravityMotion = GravityMotion = {}));\nclass ConcretePowder {\n    type = block_1.BlockType.ConcretePowder;\n    movement;\n    movementDirection;\n    outputPower;\n    gravityMotion;\n    color;\n    internalSignalStrength;\n    constructor({ movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up, outputPower = powerable_block_1.BinaryPower.None, color = wool_block_1.Color.White, gravityMotion = GravityMotion.None, internalSignalStrength = 0 } = {}) {\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n        this.outputPower = outputPower;\n        this.color = color;\n        this.gravityMotion = gravityMotion;\n        this.internalSignalStrength = internalSignalStrength;\n    }\n    update(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            const downNeighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Down);\n            if ((0, block_1.isBlock)(downNeighbour, block_1.BlockType.Air)) {\n                newState.gravityMotion = GravityMotion.Falling;\n            }\n            else {\n                newState.gravityMotion = GravityMotion.None;\n            }\n            return new ConcretePowder(newState);\n        }\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            Object.assign(newState, powerable_block_1.OutputPowerBlock.update(this, position, blocks));\n            newState.internalSignalStrength = (0, powerable_block_1.getInputSignalStrength)(position, blocks);\n            const downNeighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Down);\n            if (this.gravityMotion === GravityMotion.Fallen) {\n                newState.gravityMotion = GravityMotion.None;\n            }\n            else if (this.gravityMotion === GravityMotion.Falling &&\n                (0, block_1.isBlock)(downNeighbour, block_1.BlockType.ConcretePowder) &&\n                downNeighbour.gravityMotion === GravityMotion.Fallen) {\n                return new air_1.Air({});\n            }\n            return new ConcretePowder(newState);\n        }\n    }\n    getTextureName() {\n        let fallingTex = '';\n        if (this.movement === block_1.Movement.None) {\n            switch (this.gravityMotion) {\n                case GravityMotion.Fallen:\n                    fallingTex = 'fallen';\n                    break;\n                case GravityMotion.Falling:\n                    fallingTex = 'falling';\n                    break;\n            }\n        }\n        return {\n            layers: [\n                {\n                    textureName: `${this.color}_concrete_powder`\n                },\n                {\n                    textureName: fallingTex,\n                    blendMode: 'luminosity',\n                    alpha: 0.7\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(_direction) {\n        return this.outputPower;\n    }\n    getOutputPowerStrength(direction) {\n        return this.internalSignalStrength;\n    }\n    getMovementMethod() {\n        if (this.gravityMotion === GravityMotion.None) {\n            return block_1.BlockMovement.Moveable;\n        }\n        else {\n            return block_1.BlockMovement.Immovable;\n        }\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n    copy() {\n        return { type: this.type, color: this.color };\n    }\n    getName() {\n        return `${this.color}_${this.type}`;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            outputPower: this.outputPower,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement)\n        };\n    }\n}\nexports.ConcretePowder = ConcretePowder;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.ConcretePowder, ConcretePowder);\n(0, wool_block_1.getColors)().forEach(color => (0, block_variants_1.addBlockVariant)(new ConcretePowder({ color })));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/concrete_powder.ts?");

/***/ }),

/***/ "./src/blocks/glass_block.ts":
/*!***********************************!*\
  !*** ./src/blocks/glass_block.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GlassBlock = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass GlassBlock {\n    type = block_1.BlockType.GlassBlock;\n    movement;\n    movementDirection;\n    constructor({ movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up } = {}) {\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n    }\n    update(position, blocks) {\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            return new GlassBlock(movementUpdateChange.state);\n        }\n    }\n    subupdate(position, blocks) {\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            return new GlassBlock(movementUpdateChange.state);\n        }\n    }\n    getTextureName() {\n        return {\n            layers: [\n                {\n                    textureName: `glass`\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement)\n        };\n    }\n}\nexports.GlassBlock = GlassBlock;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.GlassBlock, GlassBlock);\n(0, block_variants_1.addBlockVariant)(new GlassBlock({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/glass_block.ts?");

/***/ }),

/***/ "./src/blocks/lever.ts":
/*!*****************************!*\
  !*** ./src/blocks/lever.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Lever = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass Lever {\n    type = block_1.BlockType.Lever;\n    isOn;\n    constructor({ isOn = false } = {}) {\n        this.isOn = isOn;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n    update(position, blocks) {\n        return new Lever(this);\n    }\n    subupdate(position, blocks) {\n        return new Lever(this);\n    }\n    getTextureName() {\n        return `lever_${this.isOn ? 'on' : 'off'}`;\n    }\n    getOutputPower(_direction) {\n        return this.isOn ? powerable_block_1.BinaryPower.Strong : powerable_block_1.BinaryPower.None;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Immovable;\n    }\n    doesConnectToRedstoneDust(_direction) {\n        return true;\n    }\n    interact() {\n        return new Lever({ ...this, isOn: !this.isOn });\n    }\n}\nexports.Lever = Lever;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.Lever, Lever);\n(0, block_variants_1.addBlockVariant)(new Lever({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/lever.ts?");

/***/ }),

/***/ "./src/blocks/observer_block.ts":
/*!**************************************!*\
  !*** ./src/blocks/observer_block.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ObserverBlock = exports.hasObserverFilter = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst air_1 = __webpack_require__(/*! ./air */ \"./src/blocks/air.ts\");\nconst hasObserverFilter = (block) => {\n    return 'filteredState' in block;\n};\nexports.hasObserverFilter = hasObserverFilter;\nclass ObserverBlock {\n    type = block_1.BlockType.ObserverBlock;\n    movement;\n    movementDirection;\n    direction;\n    lastObservation;\n    hasObservedChange;\n    constructor({ direction = direction_1.Direction.Up, movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up, lastObservation = new air_1.Air(), hasObservedChange = false } = {}) {\n        this.direction = direction;\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n        this.lastObservation = lastObservation;\n        this.hasObservedChange = hasObservedChange;\n    }\n    update(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Down);\n            let currentObservation = neighbour;\n            if ((0, exports.hasObserverFilter)(neighbour)) {\n                currentObservation = neighbour.filteredState();\n            }\n            if (currentObservation)\n                if (this.hasObservedChange) {\n                    newState.hasObservedChange = false;\n                }\n                else if ([block_1.Movement.Complete, block_1.Movement.RetractionComplete].includes(this.movement)) {\n                    newState.hasObservedChange = true;\n                }\n                else if (!(0, general_1.areObjectsEqual)(currentObservation, this.lastObservation)) {\n                    newState.hasObservedChange = true;\n                }\n                else {\n                    newState.hasObservedChange = false;\n                }\n            newState.lastObservation = currentObservation;\n            return new ObserverBlock(newState);\n        }\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            return new ObserverBlock(newState);\n        }\n    }\n    getTextureName() {\n        return {\n            layers: [\n                {\n                    textureName: `observer_${this.hasObservedChange ? 'on' : 'off'}_${this.direction.toLowerCase()}`\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(direction) {\n        if (this.hasObservedChange && direction === this.direction) {\n            return powerable_block_1.BinaryPower.Strong;\n        }\n        else {\n            return powerable_block_1.BinaryPower.None;\n        }\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Hard;\n    }\n    filteredState() {\n        return (0, general_1.createObjectSubset)(this, [\n            'type',\n            'hasObservedChange',\n            'direction',\n            'movement',\n            'movementDirection'\n            // not lastObservation\n        ]);\n    }\n    getName() {\n        return `observer`;\n    }\n}\nexports.ObserverBlock = ObserverBlock;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.ObserverBlock, ObserverBlock);\n(0, block_variants_1.addBlockVariant)(new ObserverBlock({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/observer_block.ts?");

/***/ }),

/***/ "./src/blocks/obsidian.ts":
/*!********************************!*\
  !*** ./src/blocks/obsidian.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Obsidian = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass Obsidian {\n    type = block_1.BlockType.Obsidian;\n    outputPower;\n    constructor({ outputPower = powerable_block_1.BinaryPower.None } = {}) {\n        this.outputPower = outputPower;\n    }\n    update(position, blocks) {\n        return new Obsidian(this);\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        Object.assign(newState, powerable_block_1.OutputPowerBlock.update(this, position, blocks));\n        return new Obsidian(newState);\n    }\n    getTextureName() {\n        return `obsidian`;\n    }\n    getOutputPower(_direction) {\n        return this.outputPower;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n}\nexports.Obsidian = Obsidian;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.Obsidian, Obsidian);\n(0, block_variants_1.addBlockVariant)(new Obsidian({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/obsidian.ts?");

/***/ }),

/***/ "./src/blocks/piston.ts":
/*!******************************!*\
  !*** ./src/blocks/piston.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Piston = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nclass Piston {\n    type = block_1.BlockType.Piston;\n    isBeingPowered;\n    isExtended;\n    direction;\n    movement;\n    movementDirection;\n    isSticky;\n    constructor({ isBeingPowered = false, isExtended = false, direction = direction_1.Direction.Up, movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up, isSticky = false } = {}) {\n        this.isBeingPowered = isBeingPowered;\n        this.isExtended = isExtended;\n        this.direction = direction;\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n        this.isSticky = isSticky;\n    }\n    update(position, blocks) {\n        let movementUpdateChange;\n        if (this.isBeingPowered) {\n            movementUpdateChange = {\n                type: moveable_block_1.MovementUpdateType.StateChange,\n                state: {\n                    movement: this.movement,\n                    movementDirection: this.movementDirection\n                }\n            };\n        }\n        else {\n            movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        }\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            const nonFrontDirections = (0, direction_1.getOtherDirections)(direction_1.Direction.Up);\n            const nonFrontBlocks = (0, block_fetching_1.getNeighbourBlocks)(position, blocks, nonFrontDirections);\n            const isBeingPowered = (0, general_1.zipArrays)(nonFrontDirections, nonFrontBlocks).some(([neighbourDirection, block]) => {\n                return (powerable_block_1.OutputPowerBlock.isBlock(block) &&\n                    block.getOutputPower((0, direction_1.getOppositeDirection)((0, direction_1.getRelativeDirection)(neighbourDirection, this.direction))) !== powerable_block_1.BinaryPower.None);\n                // return block.isOutputtingPower(\n                //   getOppositeDirection(\n                //     getRelativeDirection(neighbourDirection, this.direction)\n                //   )\n                // )\n            });\n            // console.log({ isBeingPowered })\n            const frontBlock = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Up);\n            const isExtended = (0, block_1.isBlock)(frontBlock, block_1.BlockType.PistonHead) &&\n                frontBlock.direction === this.direction;\n            return new Piston({\n                ...movementUpdateChange.state,\n                isBeingPowered,\n                isExtended,\n                direction: this.direction,\n                isSticky: this.isSticky\n            });\n        }\n    }\n    subupdate(position, blocks) {\n        let movementUpdateChange;\n        if (this.isExtended) {\n            movementUpdateChange = {\n                type: moveable_block_1.MovementUpdateType.StateChange,\n                state: {\n                    movement: this.movement,\n                    movementDirection: this.movementDirection\n                }\n            };\n        }\n        else {\n            movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        }\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            return new Piston({\n                ...movementUpdateChange.state,\n                isBeingPowered: this.isBeingPowered,\n                isExtended: this.isExtended,\n                direction: this.direction,\n                isSticky: this.isSticky\n            });\n        }\n    }\n    getTextureName(position, blocks) {\n        const frontBlock = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Up);\n        const isExtended = (0, block_1.isBlock)(frontBlock, block_1.BlockType.PistonHead) &&\n            frontBlock.direction === this.direction;\n        const isPowered = this.isBeingPowered;\n        // previously block had to look powered while extending to know it could\n        // not be moved\n        // (this.movement === Movement.None &&\n        //   isMoveableBlock(frontBlock) &&\n        //   frontBlock.getMovementMethod() === BlockMovement.Moveable &&\n        //   frontBlock.movement === Movement.Pending &&\n        //   frontBlock.movementDirection === this.direction)\n        const sticky = this.isSticky ? 'sticky_' : '';\n        // const tex = +(isExtended ? '' : getMovementTextureName(this))\n        // return tex\n        const texDirection = this.direction.toLowerCase();\n        return {\n            layers: [\n                {\n                    textureName: `${sticky}piston_off${isExtended ? '_extended' : ''}_${texDirection}`\n                },\n                {\n                    textureName: isPowered ? `piston_on_${texDirection}` : ''\n                },\n                isExtended ? { textureName: '' } : (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    // public isOutputtingPower (): boolean {\n    //   return false\n    // }\n    getMovementMethod() {\n        return this.isExtended ? block_1.BlockMovement.Immovable : block_1.BlockMovement.Moveable;\n    }\n    copy() {\n        return { type: this.type, isSticky: this.isSticky };\n    }\n    getName() {\n        const sticky = this.isSticky ? 'Sticky' : '';\n        return `${sticky}${this.type}`;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            isExtended: this.isExtended,\n            direction: this.direction,\n            isSticky: this.isSticky,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement)\n        };\n    }\n}\nexports.Piston = Piston;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.Piston, Piston);\nconst variants = [\n    new Piston({ isSticky: false }),\n    new Piston({ isSticky: true })\n];\nvariants.forEach(block_variants_1.addBlockVariant);\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/piston.ts?");

/***/ }),

/***/ "./src/blocks/piston_head.ts":
/*!***********************************!*\
  !*** ./src/blocks/piston_head.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PistonHead = exports.PistonHeadMotion = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst air_1 = __webpack_require__(/*! ./air */ \"./src/blocks/air.ts\");\nvar PistonHeadMotion;\n(function (PistonHeadMotion) {\n    PistonHeadMotion[\"Retracting\"] = \"retracting\";\n    PistonHeadMotion[\"Extended\"] = \"extended\";\n    PistonHeadMotion[\"Extending\"] = \"extending\";\n    PistonHeadMotion[\"Extending2\"] = \"extending2\";\n    PistonHeadMotion[\"RetractingMidExtension\"] = \"retraction_mid_extension\";\n})(PistonHeadMotion || (exports.PistonHeadMotion = PistonHeadMotion = {}));\nclass PistonHead {\n    type = block_1.BlockType.PistonHead;\n    // isRetracting: boolean\n    direction;\n    motion;\n    isSticky;\n    constructor({ \n    // isRetracting = false,\n    direction = direction_1.Direction.Up, motion = PistonHeadMotion.Extended, isSticky = false } = {}) {\n        // this.isRetracting = isRetracting\n        this.direction = direction;\n        this.motion = motion;\n        this.isSticky = isSticky;\n    }\n    subupdate(position, blocks) {\n        const backBlock = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Down);\n        const frontBlock = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Up);\n        if ((0, block_1.isBlock)(backBlock, block_1.BlockType.Piston)) {\n            if (\n            // this.isRetracting &&\n            this.motion === PistonHeadMotion.Retracting &&\n                (0, block_1.isMoveableBlock)(frontBlock) &&\n                frontBlock.getMovementMethod() === block_1.BlockMovement.Moveable &&\n                frontBlock.movement === block_1.Movement.RetractionPending &&\n                frontBlock.movementDirection === this.direction) {\n                return (0, create_block_1.createBlock)(frontBlock.type, {\n                    ...frontBlock,\n                    movement: block_1.Movement.RetractionComplete,\n                    movementDirection: this.direction\n                });\n            }\n            else if (\n            // this.isRetracting &&\n            this.motion === PistonHeadMotion.Retracting &&\n                (0, block_1.isMoveableBlock)(frontBlock) &&\n                frontBlock.getMovementMethod() === block_1.BlockMovement.Moveable &&\n                frontBlock.movement === block_1.Movement.Pending &&\n                frontBlock.movementDirection === (0, direction_1.getOppositeDirection)(this.direction)) {\n                // TODO: once subticks are added all motions should be cancelled\n                // at end of each tick\n                // this is a TEMPORARY measure\n                return new air_1.Air();\n            }\n            else if (\n            // this.isRetracting &&\n            this.motion === PistonHeadMotion.Retracting &&\n                (0, block_1.isMoveableBlock)(frontBlock) &&\n                frontBlock.getMovementMethod() === block_1.BlockMovement.Immovable) {\n                return new air_1.Air();\n            }\n            else if (\n            // this.isRetracting &&\n            this.motion === PistonHeadMotion.Retracting &&\n                !(0, block_1.isMoveableBlock)(frontBlock)) {\n                return new air_1.Air();\n            }\n            else if (\n            // this.isRetracting &&\n            this.motion === PistonHeadMotion.RetractingMidExtension) {\n                return new air_1.Air();\n            }\n            else {\n                let motion;\n                if (backBlock.isBeingPowered) {\n                    if (this.motion === PistonHeadMotion.Extended) {\n                        motion = PistonHeadMotion.Extended;\n                    }\n                    else if (this.motion === PistonHeadMotion.Extending2) {\n                        motion = PistonHeadMotion.Extending2;\n                    }\n                    else {\n                        motion = PistonHeadMotion.Extending;\n                    }\n                }\n                else {\n                    // RetractingMidExtension already handled\n                    if (this.motion === PistonHeadMotion.Extended) {\n                        motion = PistonHeadMotion.Retracting;\n                    }\n                    else if (this.motion === PistonHeadMotion.Retracting) {\n                        motion = PistonHeadMotion.Retracting;\n                    }\n                    else {\n                        motion = PistonHeadMotion.RetractingMidExtension;\n                    }\n                }\n                return new PistonHead({\n                    // isRetracting: !backBlock.isBeingPowered,\n                    direction: this.direction,\n                    motion,\n                    isSticky: this.isSticky\n                });\n            }\n        }\n        else {\n            return new air_1.Air();\n        }\n    }\n    update(position, blocks) {\n        const backBlock = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Down);\n        if ((0, block_1.isBlock)(backBlock, block_1.BlockType.Piston)) {\n            let motion;\n            if (backBlock.isBeingPowered) {\n                if (this.motion === PistonHeadMotion.Extending) {\n                    motion = PistonHeadMotion.Extending2;\n                }\n                else {\n                    motion = PistonHeadMotion.Extended;\n                }\n                // console.log(this.motion, motion)\n            }\n            else {\n                if (this.isSticky) {\n                    motion = PistonHeadMotion.RetractingMidExtension;\n                }\n                else {\n                    return new air_1.Air();\n                }\n            }\n            return new PistonHead({ ...this, motion });\n        }\n        else {\n            return new air_1.Air();\n        }\n    }\n    getTextureName() {\n        let motionTex;\n        switch (this.motion) {\n            case PistonHeadMotion.Extending2:\n            case PistonHeadMotion.Extended:\n                motionTex = '';\n                break;\n            case PistonHeadMotion.Extending:\n                motionTex = '_extending';\n                break;\n            case PistonHeadMotion.RetractingMidExtension:\n            case PistonHeadMotion.Retracting:\n                motionTex = '_retracting';\n                break;\n        }\n        const sticky = this.isSticky ? 'sticky_' : '';\n        return `${sticky}piston_head${motionTex}_${this.direction.toLowerCase()}`;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Immovable;\n    }\n    copy() {\n        return { type: this.type, isSticky: this.isSticky };\n    }\n    filteredState() {\n        const filteredMotion = (() => {\n            switch (this.motion) {\n                case PistonHeadMotion.RetractingMidExtension:\n                    return PistonHeadMotion.RetractingMidExtension;\n                default:\n                    return PistonHeadMotion.Extended;\n            }\n        })();\n        return {\n            type: this.type,\n            motion: filteredMotion,\n            direction: this.direction,\n            isSticky: this.isSticky\n        };\n    }\n}\nexports.PistonHead = PistonHead;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.PistonHead, PistonHead);\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/piston_head.ts?");

/***/ }),

/***/ "./src/blocks/redstone_block.ts":
/*!**************************************!*\
  !*** ./src/blocks/redstone_block.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneBlock = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass RedstoneBlock {\n    type = block_1.BlockType.RedstoneBlock;\n    movement;\n    movementDirection;\n    outputPower = powerable_block_1.BinaryPower.Strong;\n    constructor({ movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up } = {}) {\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n    update(position, blocks) {\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            return new RedstoneBlock(movementUpdateChange.state);\n        }\n    }\n    subupdate(position, blocks) {\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            return new RedstoneBlock(movementUpdateChange.state);\n        }\n    }\n    getTextureName() {\n        return {\n            layers: [\n                {\n                    textureName: `redstone_block`\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(_direction) {\n        return powerable_block_1.BinaryPower.Strong;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    doesConnectToRedstoneDust(_direction) {\n        return true;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement)\n        };\n    }\n}\nexports.RedstoneBlock = RedstoneBlock;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneBlock, RedstoneBlock);\n(0, block_variants_1.addBlockVariant)(new RedstoneBlock({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_block.ts?");

/***/ }),

/***/ "./src/blocks/redstone_cauldron.ts":
/*!*****************************************!*\
  !*** ./src/blocks/redstone_cauldron.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneCauldron = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst storage_1 = __webpack_require__(/*! ../core/storage */ \"./src/core/storage.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass RedstoneCauldron {\n    type = block_1.BlockType.RedstoneCauldron;\n    movement;\n    movementDirection;\n    outputPowerStrength;\n    constructor({ movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up, outputPowerStrength = 0 } = {}) {\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n        this.outputPowerStrength = outputPowerStrength;\n    }\n    getOutputComparisonStrength() {\n        return this.outputPowerStrength;\n    }\n    update(position, blocks) {\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            return new RedstoneCauldron({ ...this, ...movementUpdateChange.state });\n        }\n    }\n    subupdate(position, blocks) {\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            return new RedstoneCauldron({ ...this, ...movementUpdateChange.state });\n        }\n    }\n    getTextureName() {\n        const visibleSignalStrength = Math.ceil(this.outputPowerStrength / 2) * 2 - 1;\n        return {\n            layers: [\n                {\n                    textureName: `redstone_cauldron`\n                },\n                {\n                    textureName: this.outputPowerStrength > 0\n                        ? `redstone_cauldron_on_${visibleSignalStrength}`\n                        : ''\n                },\n                {\n                    textureName: storage_1.storage.viewSignalStrengthState.get()\n                        ? `number_${this.outputPowerStrength}`\n                        : '',\n                    blendMode: 'source-over',\n                    alpha: 1.0,\n                    minSize: 32\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            outputPowerStrength: this.outputPowerStrength,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement)\n        };\n    }\n    interact() {\n        return new RedstoneCauldron({\n            ...this,\n            outputPowerStrength: (this.outputPowerStrength + 1) % 16\n        });\n    }\n}\nexports.RedstoneCauldron = RedstoneCauldron;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneCauldron, RedstoneCauldron);\n(0, block_variants_1.addBlockVariant)(new RedstoneCauldron({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_cauldron.ts?");

/***/ }),

/***/ "./src/blocks/redstone_compator.ts":
/*!*****************************************!*\
  !*** ./src/blocks/redstone_compator.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneComparator = exports.OutputsComparisonStrength = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nvar RedstoneComparatorMode;\n(function (RedstoneComparatorMode) {\n    RedstoneComparatorMode[\"Add\"] = \"add\";\n    RedstoneComparatorMode[\"Subtract\"] = \"subtract\";\n})(RedstoneComparatorMode || (RedstoneComparatorMode = {}));\nvar OutputsComparisonStrength;\n(function (OutputsComparisonStrength) {\n    function isBlock(block) {\n        return 'getOutputComparisonStrength' in block;\n    }\n    OutputsComparisonStrength.isBlock = isBlock;\n})(OutputsComparisonStrength || (exports.OutputsComparisonStrength = OutputsComparisonStrength = {}));\nclass RedstoneComparator {\n    type = block_1.BlockType.RedstoneComparator;\n    outputSignalStrength;\n    direction;\n    mode;\n    constructor({ outputSignalStrength = 0, direction = direction_1.Direction.Up, mode = RedstoneComparatorMode.Add } = {}) {\n        this.mode = mode;\n        this.outputSignalStrength = outputSignalStrength;\n        this.direction = direction;\n    }\n    subupdate(position, blocks) {\n        return new RedstoneComparator(this);\n    }\n    getNeighbourPowerStrength(position, blocks, direction) {\n        let neighbourPowerStrength = 0;\n        const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n        const neighbourPowerDirection = (0, block_fetching_1.getOppositeRelativeDirection)(position, blocks, direction);\n        if (powerable_block_1.OutputSignalStrengthBlock.isBlock(neighbour)) {\n            neighbourPowerStrength = neighbour.getOutputPowerStrength(neighbourPowerDirection);\n        }\n        else if (OutputsComparisonStrength.isBlock(neighbour)) {\n            neighbourPowerStrength = neighbour.getOutputComparisonStrength();\n        }\n        else if (powerable_block_1.OutputPowerBlock.isBlock(neighbour) &&\n            neighbour.getOutputPower(neighbourPowerDirection) === powerable_block_1.BinaryPower.Strong) {\n            neighbourPowerStrength = 15;\n        }\n        return neighbourPowerStrength;\n    }\n    update(position, blocks) {\n        const backPowerStrength = this.getNeighbourPowerStrength(position, blocks, direction_1.Direction.Down);\n        const sidePowerStrength = Math.max(this.getNeighbourPowerStrength(position, blocks, direction_1.Direction.Left), this.getNeighbourPowerStrength(position, blocks, direction_1.Direction.Right));\n        const comparisonOperator = this.mode === RedstoneComparatorMode.Add ? 1 : -1;\n        const outputSignalStrength = Math.min(15, Math.max(backPowerStrength + comparisonOperator * sidePowerStrength, 0));\n        return new RedstoneComparator({\n            ...this,\n            outputSignalStrength\n        });\n    }\n    getTextureName() {\n        const texDirection = this.direction.toLowerCase();\n        const texIsPowered = this.outputSignalStrength > 0 ? 'on' : 'off';\n        return {\n            layers: [\n                {\n                    textureName: `comparator_base_${texDirection}`\n                },\n                {\n                    textureName: `comparator_${this.mode}_${texIsPowered}_${texDirection}`\n                }\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(direction) {\n        if (this.outputSignalStrength > 0 && direction === this.direction) {\n            return powerable_block_1.BinaryPower.Strong;\n        }\n        else {\n            return powerable_block_1.BinaryPower.None;\n        }\n    }\n    getOutputPowerStrength(direction) {\n        if (direction === this.direction) {\n            return this.outputSignalStrength;\n        }\n        else {\n            return 0;\n        }\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Hard;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Immovable;\n    }\n    doesConnectToRedstoneDust(direction) {\n        return true;\n    }\n    interact() {\n        const mode = this.mode === RedstoneComparatorMode.Add\n            ? RedstoneComparatorMode.Subtract\n            : RedstoneComparatorMode.Add;\n        return new RedstoneComparator({ ...this, mode });\n    }\n    filteredState() {\n        return (0, general_1.createObjectSubset)(this, ['type', 'isPowered', 'direction']);\n    }\n}\nexports.RedstoneComparator = RedstoneComparator;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneComparator, RedstoneComparator);\n(0, block_variants_1.addBlockVariant)(new RedstoneComparator({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_compator.ts?");

/***/ }),

/***/ "./src/blocks/redstone_dust.ts":
/*!*************************************!*\
  !*** ./src/blocks/redstone_dust.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneDust = exports.ConnectsToRedstoneDustBlock = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst storage_1 = __webpack_require__(/*! ../core/storage */ \"./src/core/storage.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nvar ConnectsToRedstoneDustBlock;\n(function (ConnectsToRedstoneDustBlock) {\n    function isBlock(block) {\n        return 'doesConnectToRedstoneDust' in block;\n    }\n    ConnectsToRedstoneDustBlock.isBlock = isBlock;\n})(ConnectsToRedstoneDustBlock || (exports.ConnectsToRedstoneDustBlock = ConnectsToRedstoneDustBlock = {}));\nclass RedstoneDust {\n    type = block_1.BlockType.RedstoneDust;\n    outputPower;\n    // isPowered: boolean\n    inputPowerStrength;\n    connectedDirections;\n    constructor({ outputPower = powerable_block_1.BinaryPower.None, \n    // isPowered = false,\n    inputPowerStrength = {\n        [direction_1.Direction.Up]: 0,\n        [direction_1.Direction.Down]: 0,\n        [direction_1.Direction.Left]: 0,\n        [direction_1.Direction.Right]: 0\n    }, connectedDirections = [] } = {}) {\n        this.outputPower = outputPower; // TODO: this is not being used!\n        // this.isPowered = isPowered\n        this.inputPowerStrength = inputPowerStrength;\n        this.connectedDirections = connectedDirections;\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        let inputPowerStrength = {\n            [direction_1.Direction.Up]: 0,\n            [direction_1.Direction.Down]: 0,\n            [direction_1.Direction.Left]: 0,\n            [direction_1.Direction.Right]: 0\n        };\n        for (const direction of (0, direction_1.getAllDirections)()) {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            let neighbourPowerStrength = 0;\n            if (powerable_block_1.OutputPowerBlock.isBlock(neighbour) &&\n                neighbour.getOutputPower((0, direction_1.getOppositeDirection)(direction)) ===\n                    powerable_block_1.BinaryPower.Strong &&\n                !(0, block_1.isBlock)(neighbour, block_1.BlockType.RedstoneDust)) {\n                if (powerable_block_1.OutputSignalStrengthBlock.isBlock(neighbour) &&\n                    !(0, block_1.isBlock)(neighbour, block_1.BlockType.RedstoneDust)) {\n                    neighbourPowerStrength = neighbour.getOutputPowerStrength((0, direction_1.getOppositeDirection)(direction));\n                }\n                else {\n                    neighbourPowerStrength = 15;\n                }\n            }\n            if (neighbourPowerStrength) {\n                // isPowered = true\n                // newState.powerStrength = 15\n                inputPowerStrength[direction] = neighbourPowerStrength;\n            }\n            else if ((0, block_1.isBlock)(neighbour, block_1.BlockType.RedstoneDust)) {\n                const powerStrength = Math.max(neighbour.getOutputPowerStrength((0, direction_1.getOppositeDirection)(direction)) - 1, 0);\n                if (powerStrength >= this.getInternalPowerStrength()) {\n                    inputPowerStrength[direction] = powerStrength;\n                }\n            }\n        }\n        // newState.\n        // newState.isPowered = isPowered\n        newState.inputPowerStrength = inputPowerStrength;\n        return new RedstoneDust(newState);\n    }\n    update(position, blocks) {\n        let newState = { ...this };\n        Object.assign(newState, powerable_block_1.OutputPowerBlock.update(this, position, blocks));\n        newState.connectedDirections = this.calculateConnectedDirections(position, blocks);\n        return new RedstoneDust(newState);\n    }\n    calculateConnectedDirections(position, blocks) {\n        let connectedDirections = (0, direction_1.getAllDirections)().filter(direction => {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            return (ConnectsToRedstoneDustBlock.isBlock(neighbour) &&\n                neighbour.doesConnectToRedstoneDust((0, direction_1.getOppositeDirection)(direction)));\n        });\n        if (connectedDirections.length === 1) {\n            const oppositeDirection = (0, direction_1.getOppositeDirection)(connectedDirections[0]);\n            connectedDirections.push(oppositeDirection);\n        }\n        connectedDirections = (0, direction_1.getAllDirections)().filter(direction => connectedDirections.includes(direction));\n        return connectedDirections;\n    }\n    getTextureName() {\n        let tex = 'redstone_dust';\n        this.connectedDirections.forEach(direction => (tex += '_' + direction.toLowerCase()));\n        let signalStrength = this.getInternalPowerStrength();\n        // tex += signalStrength > 0 ? '_on' : '_off'\n        tex += '_' + signalStrength;\n        return {\n            layers: [\n                {\n                    textureName: tex\n                    // mask: (i, v) => {\n                    //   switch (i % 4) {\n                    //     case 0:\n                    //       return (v / 255) * (90 + (255 - 90) * (signalStrength / 15))\n                    //     case 1:\n                    //       return v * 0\n                    //     case 2:\n                    //       return v * 0\n                    //     default:\n                    //       return v\n                    //   }\n                    // }\n                },\n                {\n                    textureName: storage_1.storage.viewSignalStrengthState.get()\n                        ? `number_${signalStrength}`\n                        : '',\n                    blendMode: 'source-over',\n                    alpha: 1.0,\n                    minSize: 32\n                }\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    // public isOutputtingPower (direction: Direction): boolean {\n    //   return (\n    //     this.powerStrength > 0 &&\n    //     (this.connectedDirections.length == 0 ||\n    //       this.connectedDirections.includes(direction))\n    //   )\n    // }\n    getInternalPowerStrength() {\n        const powerStrengths = (0, direction_1.getAllDirections)().map(direction => this.inputPowerStrength[direction]);\n        const powerStrength = Math.max(Math.max(...powerStrengths), 0);\n        return powerStrength;\n    }\n    getOutputPowerStrength(direction) {\n        const powerStrengths = (0, direction_1.getOtherDirections)(direction).map(direction => this.inputPowerStrength[direction]);\n        const powerStrength = Math.max(Math.max(...powerStrengths), 0);\n        return powerStrength;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Hard;\n    }\n    getOutputPower(direction) {\n        const powerStrength = this.getOutputPowerStrength(direction);\n        if (powerStrength > 0 &&\n            (this.connectedDirections.length == 0 ||\n                this.connectedDirections.includes(direction))) {\n            return powerable_block_1.BinaryPower.Weak;\n        }\n        else {\n            return powerable_block_1.BinaryPower.None;\n        }\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Breaks;\n    }\n    doesConnectToRedstoneDust(_direction) {\n        return true;\n    }\n}\nexports.RedstoneDust = RedstoneDust;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneDust, RedstoneDust);\n(0, block_variants_1.addBlockVariant)(new RedstoneDust({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_dust.ts?");

/***/ }),

/***/ "./src/blocks/redstone_junction.ts":
/*!*****************************************!*\
  !*** ./src/blocks/redstone_junction.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneJunction = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass RedstoneJunction {\n    type = block_1.BlockType.RedstoneJunction;\n    inputPowerStrength;\n    constructor({ inputPowerStrength = {\n        [direction_1.Direction.Up]: 0,\n        [direction_1.Direction.Down]: 0,\n        [direction_1.Direction.Left]: 0,\n        [direction_1.Direction.Right]: 0\n    } } = {}) {\n        this.inputPowerStrength = inputPowerStrength;\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        let inputPowerStrength = {\n            [direction_1.Direction.Up]: 0,\n            [direction_1.Direction.Down]: 0,\n            [direction_1.Direction.Left]: 0,\n            [direction_1.Direction.Right]: 0\n        };\n        for (const direction of (0, direction_1.getAllDirections)()) {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            let neighbourPowerStrength = 0;\n            if (powerable_block_1.OutputSignalStrengthBlock.isBlock(neighbour) &&\n                !(0, block_1.isBlock)(neighbour, block_1.BlockType.RedstoneJunction)) {\n                neighbourPowerStrength = neighbour.getOutputPowerStrength((0, direction_1.getOppositeDirection)(direction));\n            }\n            else if (powerable_block_1.OutputPowerBlock.isBlock(neighbour) &&\n                neighbour.getOutputPower((0, direction_1.getOppositeDirection)(direction)) ===\n                    powerable_block_1.BinaryPower.Strong &&\n                !(0, block_1.isBlock)(neighbour, block_1.BlockType.RedstoneJunction)) {\n                neighbourPowerStrength = 15;\n            }\n            if (neighbourPowerStrength) {\n                // isPowered = true\n                // newState.powerStrength = 15\n                inputPowerStrength[direction] = neighbourPowerStrength;\n            }\n            else if ((0, block_1.isBlock)(neighbour, block_1.BlockType.RedstoneJunction)) {\n                const powerStrength = Math.max(neighbour.getOutputPowerStrength((0, direction_1.getOppositeDirection)(direction)) - 1, 0);\n                if (powerStrength >= this.getInternalPowerStrength()) {\n                    inputPowerStrength[direction] = powerStrength;\n                }\n            }\n        }\n        newState.inputPowerStrength = inputPowerStrength;\n        return new RedstoneJunction(newState);\n    }\n    update(position, blocks) {\n        let newState = { ...this };\n        return new RedstoneJunction(newState);\n    }\n    getTextureName() {\n        const hasVerticalPower = this.getOutputPowerStrength(direction_1.Direction.Up);\n        const hasHorizontalPower = this.getOutputPowerStrength(direction_1.Direction.Left);\n        return {\n            layers: [\n                {\n                    textureName: `junction`\n                },\n                {\n                    textureName: hasVerticalPower ? `junction_on_vertical` : ''\n                },\n                {\n                    textureName: hasHorizontalPower ? `junction_on_horizontal` : ''\n                }\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getInternalPowerStrength() {\n        const powerStrengths = (0, direction_1.getAllDirections)().map(direction => this.inputPowerStrength[direction]);\n        const powerStrength = Math.max(Math.max(...powerStrengths), 0);\n        return powerStrength;\n    }\n    getOutputPowerStrength(direction) {\n        let outputPower;\n        if ([direction_1.Direction.Up, direction_1.Direction.Down].includes(direction)) {\n            outputPower = Math.max(this.inputPowerStrength.Up, this.inputPowerStrength.Down);\n        }\n        else {\n            outputPower = Math.max(this.inputPowerStrength.Left, this.inputPowerStrength.Right);\n        }\n        return Math.max(outputPower - 1, 0);\n    }\n    getOutputPower(direction) {\n        const powerStrength = this.getOutputPowerStrength(direction);\n        if (powerStrength > 0) {\n            return powerable_block_1.BinaryPower.Strong;\n        }\n        else {\n            return powerable_block_1.BinaryPower.None;\n        }\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Breaks;\n    }\n    doesConnectToRedstoneDust(_direction) {\n        return true;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Hard;\n    }\n}\nexports.RedstoneJunction = RedstoneJunction;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneJunction, RedstoneJunction);\n(0, block_variants_1.addBlockVariant)(new RedstoneJunction({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_junction.ts?");

/***/ }),

/***/ "./src/blocks/redstone_lamp.ts":
/*!*************************************!*\
  !*** ./src/blocks/redstone_lamp.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneLamp = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass RedstoneLamp {\n    type = block_1.BlockType.RedstoneLamp;\n    movement;\n    movementDirection;\n    outputPower;\n    isPowered;\n    internalSignalStrength;\n    constructor({ movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up, outputPower = powerable_block_1.BinaryPower.None, isPowered = false, internalSignalStrength = 0 } = {}) {\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n        this.outputPower = outputPower;\n        this.isPowered = isPowered;\n        this.internalSignalStrength = internalSignalStrength;\n    }\n    update(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            return new RedstoneLamp(newState);\n        }\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, powerable_block_1.OutputPowerBlock.update(this, position, blocks));\n            Object.assign(newState, powerable_block_1.IsPoweredBlock.update(this, position, blocks));\n            newState.internalSignalStrength = (0, powerable_block_1.getInputSignalStrength)(position, blocks);\n            Object.assign(newState, movementUpdateChange.state);\n            return new RedstoneLamp(newState);\n        }\n    }\n    getTextureName() {\n        return {\n            layers: [\n                {\n                    textureName: `redstone_lamp_${this.isPowered ? 'on' : 'off'}`\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(_direction) {\n        return this.outputPower;\n    }\n    getOutputPowerStrength(direction) {\n        return this.internalSignalStrength;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            outputPower: this.outputPower,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement)\n        };\n    }\n}\nexports.RedstoneLamp = RedstoneLamp;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneLamp, RedstoneLamp);\n(0, block_variants_1.addBlockVariant)(new RedstoneLamp({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_lamp.ts?");

/***/ }),

/***/ "./src/blocks/redstone_repeater.ts":
/*!*****************************************!*\
  !*** ./src/blocks/redstone_repeater.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneRepeater = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nclass RedstoneRepeater {\n    type = block_1.BlockType.RedstoneRepeater;\n    ticksOn;\n    ticksOff;\n    isPowered; // is outputting power\n    direction;\n    isLocked;\n    constructor({ ticksOn = 0, ticksOff = 1, isPowered = false, direction = direction_1.Direction.Up, isLocked = false } = {}) {\n        this.ticksOn = ticksOn;\n        this.ticksOff = ticksOff;\n        this.isPowered = isPowered;\n        this.direction = direction;\n        this.isLocked = isLocked;\n    }\n    subupdate(position, blocks) {\n        return new RedstoneRepeater(this);\n    }\n    update(position, blocks) {\n        const backBlock = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Down);\n        const isLocked = [direction_1.Direction.Left, direction_1.Direction.Right].some(direction => {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            const isLocking = (0, block_1.isBlock)(neighbour, block_1.BlockType.RedstoneRepeater) &&\n                powerable_block_1.OutputPowerBlock.isOutputtingPower(neighbour, (0, block_fetching_1.getOppositeRelativeDirection)(position, blocks, direction));\n            return isLocking;\n        });\n        const isBeingPowered = powerable_block_1.OutputPowerBlock.isOutputtingPower(backBlock, this.direction);\n        let ticksOn = this.ticksOn;\n        let ticksOff = this.ticksOff;\n        let isPowered = this.isPowered;\n        if (isLocked) {\n            if (isPowered) {\n                ticksOn += ticksOff;\n                ticksOff = 0;\n            }\n            else {\n                ticksOff += ticksOn;\n                ticksOn = 0;\n            }\n        }\n        else {\n            // increment cooldown\n            if (isPowered && !isBeingPowered && this.ticksOn > 0) {\n                ticksOn -= 1;\n                ticksOff += 1;\n            }\n            else if (!isPowered && this.ticksOn > 0) {\n                ticksOn += 1;\n                ticksOff -= 1;\n            }\n            else if (isBeingPowered && this.ticksOff > 0) {\n                ticksOn += 1;\n                ticksOff -= 1;\n            }\n            // change isPowered if cooldown reached\n            if (isPowered && ticksOn === 0) {\n                isPowered = false;\n            }\n            else if (!isPowered && ticksOff === 0) {\n                isPowered = true;\n            }\n            // off-cooldown reset if powered while outputting power\n            if (isBeingPowered && isPowered) {\n                ticksOn += ticksOff;\n                ticksOff = 0;\n            }\n        }\n        return new RedstoneRepeater({\n            ...this,\n            ticksOn,\n            ticksOff,\n            isPowered,\n            isLocked\n        });\n    }\n    getTextureName() {\n        const texDirection = this.direction.toLowerCase();\n        return {\n            layers: [\n                {\n                    textureName: `redstone_repeater_base_${texDirection}`\n                },\n                {\n                    textureName: `redstone_repeater_on_${this.ticksOn}_off_${this.ticksOff}${this.isPowered && this.ticksOff > 0 ? '_powered' : ''}_${texDirection}`\n                },\n                {\n                    textureName: this.isLocked\n                        ? `redstone_repeater_locked_${texDirection}`\n                        : ''\n                }\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(direction) {\n        if (this.isPowered && direction === this.direction) {\n            return powerable_block_1.BinaryPower.Strong;\n        }\n        else {\n            return powerable_block_1.BinaryPower.None;\n        }\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Hard;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Immovable;\n    }\n    doesConnectToRedstoneDust(direction) {\n        return (direction === this.direction ||\n            direction === (0, direction_1.getOppositeDirection)(this.direction));\n    }\n    interact() {\n        let ticksOn = this.ticksOn, ticksOff = this.ticksOff;\n        if (this.isPowered) {\n            ticksOn = ((ticksOn + ticksOff) % 4) + 1;\n            ticksOff = 0;\n        }\n        else {\n            ticksOff = ((ticksOn + ticksOff) % 4) + 1;\n            ticksOn = 0;\n        }\n        return new RedstoneRepeater({ ...this, ticksOn, ticksOff });\n    }\n    filteredState() {\n        return (0, general_1.createObjectSubset)(this, [\n            'type',\n            'isPowered',\n            'direction'\n            // not ticksOn / ticksOff\n        ]);\n    }\n}\nexports.RedstoneRepeater = RedstoneRepeater;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneRepeater, RedstoneRepeater);\n(0, block_variants_1.addBlockVariant)(new RedstoneRepeater({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_repeater.ts?");

/***/ }),

/***/ "./src/blocks/redstone_torch.ts":
/*!**************************************!*\
  !*** ./src/blocks/redstone_torch.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RedstoneTorch = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass RedstoneTorch {\n    type = block_1.BlockType.RedstoneTorch;\n    isBeingPowered;\n    direction;\n    constructor({ isBeingPowered = false, direction = direction_1.Direction.Up } = {}) {\n        // const { isBeingPowered = false, direction = Direction.Up } = state\n        this.isBeingPowered = isBeingPowered;\n        this.direction = direction;\n    }\n    update(position, blocks) {\n        const backBlock = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction_1.Direction.Down);\n        const isBeingPowered = powerable_block_1.OutputPowerBlock.isOutputtingPower(backBlock, this.direction);\n        return new RedstoneTorch({ isBeingPowered, direction: this.direction });\n    }\n    subupdate(position, blocks) {\n        return new RedstoneTorch(this);\n    }\n    getTextureName() {\n        return `redstone_torch_${this.isOn() ? 'on' : 'off'}_${this.direction.toLowerCase()}`;\n    }\n    getOutputPower(direction) {\n        if (this.isOn() && direction !== (0, direction_1.getOppositeDirection)(this.direction)) {\n            return powerable_block_1.BinaryPower.Strong;\n        }\n        else {\n            return powerable_block_1.BinaryPower.None;\n        }\n    }\n    getPowerHardness(direction) {\n        if (direction === this.direction) {\n            return powerable_block_1.PowerHardness.Hard;\n        }\n        else {\n            return powerable_block_1.PowerHardness.Soft;\n        }\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Immovable;\n    }\n    isOn() {\n        return !this.isBeingPowered;\n    }\n    doesConnectToRedstoneDust(_direction) {\n        return true;\n    }\n}\nexports.RedstoneTorch = RedstoneTorch;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.RedstoneTorch, RedstoneTorch);\n(0, block_variants_1.addBlockVariant)(new RedstoneTorch({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/redstone_torch.ts?");

/***/ }),

/***/ "./src/blocks/sign_block.ts":
/*!**********************************!*\
  !*** ./src/blocks/sign_block.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SignBlock = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass SignBlock {\n    type = block_1.BlockType.SignBlock;\n    text;\n    constructor({ text = '' } = {}) {\n        this.text = text;\n    }\n    subupdate(position, blocks) {\n        return new SignBlock(this);\n    }\n    update(position, blocks) {\n        return new SignBlock(this);\n    }\n    getTextureName() {\n        return 'sign';\n    }\n    getName() {\n        return `sign`;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Immovable;\n    }\n}\nexports.SignBlock = SignBlock;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.SignBlock, SignBlock);\n(0, block_variants_1.addBlockVariant)(new SignBlock({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/sign_block.ts?");

/***/ }),

/***/ "./src/blocks/target_block.ts":
/*!************************************!*\
  !*** ./src/blocks/target_block.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TargetBlock = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nclass TargetBlock {\n    type = block_1.BlockType.TargetBlock;\n    movement;\n    movementDirection;\n    outputPower;\n    internalSignalStrength;\n    constructor({ movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up, outputPower = powerable_block_1.BinaryPower.None, internalSignalStrength = 0 } = {}) {\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n        this.outputPower = outputPower;\n        this.internalSignalStrength = internalSignalStrength;\n    }\n    update(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            return new TargetBlock(newState);\n        }\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            Object.assign(newState, powerable_block_1.OutputPowerBlock.update(this, position, blocks));\n            newState.internalSignalStrength = (0, powerable_block_1.getInputSignalStrength)(position, blocks);\n            return new TargetBlock(newState);\n        }\n    }\n    getTextureName() {\n        return {\n            layers: [\n                {\n                    textureName: `target_block`\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(_direction) {\n        return this.outputPower;\n    }\n    getOutputPowerStrength(direction) {\n        return this.internalSignalStrength;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n    doesConnectToRedstoneDust(_direction) {\n        return true;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            outputPower: this.outputPower,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement)\n        };\n    }\n}\nexports.TargetBlock = TargetBlock;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.TargetBlock, TargetBlock);\n(0, block_variants_1.addBlockVariant)(new TargetBlock({}));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/target_block.ts?");

/***/ }),

/***/ "./src/blocks/wool_block.ts":
/*!**********************************!*\
  !*** ./src/blocks/wool_block.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WoolBlock = exports.getColors = exports.Color = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst moveable_block_1 = __webpack_require__(/*! ../core/moveable_block */ \"./src/core/moveable_block.ts\");\nconst powerable_block_1 = __webpack_require__(/*! ../core/powerable_block */ \"./src/core/powerable_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nvar Color;\n(function (Color) {\n    Color[\"Red\"] = \"red\";\n    Color[\"Orange\"] = \"orange\";\n    Color[\"Yellow\"] = \"yellow\";\n    Color[\"Lime\"] = \"lime\";\n    Color[\"Green\"] = \"green\";\n    Color[\"Cyan\"] = \"cyan\";\n    Color[\"LightBlue\"] = \"light_blue\";\n    Color[\"Blue\"] = \"blue\";\n    Color[\"Purple\"] = \"purple\";\n    Color[\"Magenta\"] = \"magenta\";\n    Color[\"Pink\"] = \"pink\";\n    Color[\"Brown\"] = \"brown\";\n    Color[\"White\"] = \"white\";\n    Color[\"LightGray\"] = \"light_gray\";\n    Color[\"Gray\"] = \"gray\";\n    Color[\"Black\"] = \"black\";\n})(Color || (exports.Color = Color = {}));\nconst getColors = () => {\n    return [\n        Color.Red,\n        Color.Orange,\n        Color.Yellow,\n        Color.Lime,\n        Color.Green,\n        Color.Cyan,\n        Color.LightBlue,\n        Color.Blue,\n        Color.Purple,\n        Color.Magenta,\n        Color.Pink,\n        Color.Brown,\n        Color.White,\n        Color.LightGray,\n        Color.Gray,\n        Color.Black\n    ];\n};\nexports.getColors = getColors;\nclass WoolBlock {\n    type = block_1.BlockType.WoolBlock;\n    movement;\n    movementDirection;\n    outputPower;\n    color;\n    internalSignalStrength;\n    constructor({ movement = block_1.Movement.None, movementDirection = direction_1.Direction.Up, outputPower = powerable_block_1.BinaryPower.None, color = Color.White, internalSignalStrength = 0 } = {}) {\n        this.movement = movement;\n        this.movementDirection = movementDirection;\n        this.outputPower = outputPower;\n        this.color = color;\n        this.internalSignalStrength = internalSignalStrength;\n    }\n    update(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            return new WoolBlock(newState);\n        }\n    }\n    subupdate(position, blocks) {\n        let newState = { ...this };\n        const movementUpdateChange = (0, moveable_block_1.updateSubMovement)(position, blocks, this.movement, this.movementDirection);\n        if (movementUpdateChange.type === moveable_block_1.MovementUpdateType.BlockChange) {\n            return movementUpdateChange.block;\n        }\n        else {\n            Object.assign(newState, movementUpdateChange.state);\n            Object.assign(newState, powerable_block_1.OutputPowerBlock.update(this, position, blocks));\n            newState.internalSignalStrength = (0, powerable_block_1.getInputSignalStrength)(position, blocks);\n            return new WoolBlock(newState);\n        }\n    }\n    getTextureName() {\n        return {\n            layers: [\n                {\n                    textureName: `${this.color}_wool`\n                },\n                (0, moveable_block_1.getMovementTextureName)(this)\n            ].filter(x => x.textureName !== '')\n        };\n    }\n    getOutputPower(_direction) {\n        return this.outputPower;\n    }\n    getOutputPowerStrength(direction) {\n        return this.internalSignalStrength;\n    }\n    getMovementMethod() {\n        return block_1.BlockMovement.Moveable;\n    }\n    getPowerHardness(direction) {\n        return powerable_block_1.PowerHardness.Soft;\n    }\n    copy() {\n        return { type: this.type, color: this.color };\n    }\n    getName() {\n        return `${this.color}_wool`;\n    }\n    filteredState() {\n        return {\n            type: this.type,\n            outputPower: this.outputPower,\n            movement: (0, moveable_block_1.observerFilteredMovement)(this.movement),\n            color: this.color\n        };\n    }\n}\nexports.WoolBlock = WoolBlock;\n(0, create_block_1.addCreateBlockFunction)(block_1.BlockType.WoolBlock, WoolBlock);\n(0, exports.getColors)().forEach(color => (0, block_variants_1.addBlockVariant)(new WoolBlock({ color })));\n\n\n//# sourceURL=webpack://cellular-redstone/./src/blocks/wool_block.ts?");

/***/ }),

/***/ "./src/containers/array2d.ts":
/*!***********************************!*\
  !*** ./src/containers/array2d.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Array2D = exports.Dict2D2 = exports.Dict2D = exports.ChunkContainer = void 0;\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst vec2_1 = __webpack_require__(/*! ./vec2 */ \"./src/containers/vec2.ts\");\nclass ChunkContainer {\n    chunks;\n    chunkSize;\n    createDefaultItem;\n    isDefaultItem;\n    listenToChunkCreation;\n    constructor(chunkSize, createDefaultItem, isDefaultItem, listenToChunkCreation = false) {\n        this.chunks = {};\n        this.chunkSize = chunkSize;\n        this.createDefaultItem = createDefaultItem;\n        this.isDefaultItem = isDefaultItem;\n        this.listenToChunkCreation = listenToChunkCreation;\n    }\n    clone(other) {\n        // chunk size must be same\n        this.chunks = other.chunks;\n    }\n    getChunkIndex(v) {\n        return `${Math.floor(v.x / this.chunkSize)} ${Math.floor(v.y / this.chunkSize)}`;\n    }\n    getBlockPositionInChunk(v) {\n        let x = v.x % this.chunkSize;\n        if (x < 0) {\n            x += this.chunkSize;\n        }\n        let y = v.y % this.chunkSize;\n        if (y < 0) {\n            y += this.chunkSize;\n        }\n        return { x, y };\n    }\n    getBlockIndex(v) {\n        const { x, y } = this.getBlockPositionInChunk(v);\n        return x + y * this.chunkSize;\n    }\n    chunkIndexToVec2(chunkIndex) {\n        const [x, y] = chunkIndex.split(' ');\n        return { x: Number(x), y: Number(y) };\n    }\n    createChunk() {\n        const chunk = [];\n        const area = this.chunkSize * this.chunkSize;\n        for (let i = 0; i < area; ++i) {\n            chunk.push(this.createDefaultItem());\n        }\n        return chunk;\n    }\n    createChunkAtPosition(v) {\n        const chunkIndex = this.getChunkIndex(v);\n        const chunk = this.chunks[chunkIndex];\n        if (!chunk) {\n            if (this.listenToChunkCreation) {\n                // console.log('creating chunk', chunkIndex)\n            }\n            this.chunks[chunkIndex] = this.createChunk();\n        }\n    }\n    createNeighbouringChunksAtPosition(v) {\n        const rv = this.getBlockPositionInChunk(v);\n        if (rv.x === 0) {\n            this.createChunkAtPosition({ x: v.x - this.chunkSize, y: v.y });\n        }\n        else if (rv.x === this.chunkSize - 1) {\n            this.createChunkAtPosition({ x: v.x + this.chunkSize, y: v.y });\n        }\n        if (rv.y === 0) {\n            this.createChunkAtPosition({ x: v.x, y: v.y - this.chunkSize });\n        }\n        else if (rv.y === this.chunkSize - 1) {\n            this.createChunkAtPosition({ x: v.x, y: v.y + this.chunkSize });\n        }\n    }\n    setValue(v, value) {\n        // build chunks at and around the position we attempt to set a block\n        this.createChunkAtPosition(v);\n        if (!this.isDefaultItem(value)) {\n            this.createNeighbouringChunksAtPosition(v);\n        }\n        const chunkIndex = this.getChunkIndex(v);\n        const blockIndex = this.getBlockIndex(v);\n        const chunk = this.chunks[chunkIndex];\n        chunk[blockIndex] = value;\n    }\n    getValue(v) {\n        const chunkIndex = this.getChunkIndex(v);\n        const blockIndex = this.getBlockIndex(v);\n        const chunk = this.chunks[chunkIndex];\n        // do not build a chunk if we attempt to query one which does not exist\n        if (!chunk) {\n            return this.createDefaultItem();\n        }\n        return chunk[blockIndex];\n    }\n    getPositions() {\n        const positions = [];\n        if (true) {\n            for (const chunkIndex in this.chunks) {\n                const chunkPos = (0, vec2_1.vec2Multiply)(this.chunkIndexToVec2(chunkIndex), {\n                    x: this.chunkSize,\n                    y: this.chunkSize\n                });\n                const xmax = chunkPos.x + this.chunkSize, ymax = chunkPos.y + this.chunkSize;\n                for (let y = chunkPos.y; y < ymax; ++y) {\n                    for (let x = chunkPos.x; x < xmax; ++x) {\n                        const position = { x, y };\n                        positions.push(position);\n                    }\n                }\n            }\n        }\n        else {}\n        return positions;\n    }\n    foreach(callback) {\n        for (const index in this.chunks) {\n            const chunkPos = this.chunkIndexToVec2(index);\n            const chunkBlockPos = {\n                x: chunkPos.x * this.chunkSize,\n                y: chunkPos.y * this.chunkSize\n            };\n            for (let y = chunkBlockPos.y; y < chunkBlockPos.y + this.chunkSize; ++y) {\n                for (let x = chunkBlockPos.x; x < chunkBlockPos.x + this.chunkSize; ++x) {\n                    const position = { x, y };\n                    const value = this.getValue(position);\n                    callback(value, position);\n                }\n            }\n        }\n    }\n    map(callback) {\n        const newContainer = new ChunkContainer(this.chunkSize, this.createDefaultItem, this.isDefaultItem);\n        for (const index in this.chunks) {\n            const chunkPos = this.chunkIndexToVec2(index);\n            const chunkBlockPos = {\n                x: chunkPos.x * this.chunkSize,\n                y: chunkPos.y * this.chunkSize\n            };\n            for (let y = chunkBlockPos.y; y < chunkBlockPos.y + this.chunkSize; ++y) {\n                for (let x = chunkBlockPos.x; x < chunkBlockPos.x + this.chunkSize; ++x) {\n                    const position = { x, y };\n                    const value = this.getValue(position);\n                    const newValue = callback(value, position);\n                    newContainer.setValue(position, newValue);\n                }\n            }\n        }\n        const newChunksPositions = (0, general_1.getMissingKeys)(this.chunks, newContainer.chunks);\n        if (newChunksPositions.length > 0) {\n            console.log('Creating chunk(s)', newChunksPositions);\n        }\n        return newContainer;\n    }\n    mapToDict2D(callback) {\n        const dict2D = new Dict2D();\n        if (false) {}\n        else {\n            for (const index in this.chunks) {\n                const chunkPos = this.chunkIndexToVec2(index);\n                const chunkBlockPos = {\n                    x: chunkPos.x * this.chunkSize,\n                    y: chunkPos.y * this.chunkSize\n                };\n                for (let y = chunkBlockPos.y; y < chunkBlockPos.y + this.chunkSize; ++y) {\n                    for (let x = chunkBlockPos.x; x < chunkBlockPos.x + this.chunkSize; ++x) {\n                        const position = { x, y };\n                        const value = this.getValue(position);\n                        if (!this.isDefaultItem(value)) {\n                            const newValue = callback(value, position);\n                            dict2D.setValue(position, newValue);\n                        }\n                    }\n                }\n            }\n        }\n        return dict2D;\n    }\n}\nexports.ChunkContainer = ChunkContainer;\nclass Dict2D {\n    items;\n    constructor() {\n        this.items = new Map();\n    }\n    clone(other) {\n        this.items = other.items;\n    }\n    getIndex(v) {\n        return `${v.x} ${v.y}`;\n    }\n    indexToVec2(i) {\n        const [x, y] = i.split(' ');\n        return { x: Number(x), y: Number(y) };\n    }\n    setValue(v, value) {\n        const index = this.getIndex(v);\n        this.items.set(index, value);\n    }\n    getValue(v) {\n        const index = this.getIndex(v);\n        return this.items.get(index);\n    }\n    map(callback) {\n        const newContainer = new Dict2D();\n        for (const [index, value] of this.items) {\n            const v = this.indexToVec2(index);\n            const newValue = callback(value, v);\n            newContainer.setValue(v, newValue);\n        }\n        return newContainer;\n    }\n    foreach(callback) {\n        for (const [index, value] of this.items) {\n            const v = this.indexToVec2(index);\n            callback(value, v);\n        }\n    }\n}\nexports.Dict2D = Dict2D;\n// export class Dict2D<T> {\n//   public items: StringDict<T>\n//   constructor (items?: StringDict<T>) {\n//     this.items = items ?? {}\n//   }\n//   public clone (other: Dict2D<T>) {\n//     this.items = other.items\n//   }\n//   private getIndex (v: Vec2): string {\n//     return `${v.x} ${v.y}`\n//   }\n//   private indexToVec2 (i: string): Vec2 {\n//     const [x, y] = i.split(' ')\n//     return { x: Number(x), y: Number(y) }\n//   }\n//   public setValue (v: Vec2, value: T): void {\n//     const index = this.getIndex(v)\n//     this.items[index] = value\n//   }\n//   public getValue (v: Vec2): T {\n//     const index = this.getIndex(v)\n//     return this.items[index]\n//   }\n//   public map<U> (callback: (value: T, v: Vec2) => U): Dict2D<U> {\n//     const newContainer = new Dict2D<U>()\n//     for (const [index, value] of Object.entries(this.items)) {\n//       const v: Vec2 = this.indexToVec2(index)\n//       const newValue = callback(value, v)\n//       newContainer.setValue(v, newValue)\n//     }\n//     return newContainer\n//   }\n//   public foreach<U> (callback: (value: T, v: Vec2) => U): void {\n//     for (const [index, value] of Object.entries(this.items)) {\n//       const v: Vec2 = this.indexToVec2(index)\n//       callback(value, v)\n//     }\n//   }\n// }\nclass Dict2D2 {\n    items;\n    constructor(items) {\n        this.items = items ?? {};\n    }\n    clone(other) {\n        this.items = other.items;\n    }\n    getIndex(v) {\n        return `${v.x} ${v.y}`;\n    }\n    indexToVec2(i) {\n        const [x, y] = i.split(' ');\n        return { x: Number(x), y: Number(y) };\n    }\n    setValue(v, value) {\n        const index = this.getIndex(v);\n        this.items[index] = value;\n    }\n    getValue(v) {\n        const index = this.getIndex(v);\n        return this.items[index];\n    }\n    map(callback) {\n        const newContainer = new Dict2D2();\n        for (const [index, value] of Object.entries(this.items)) {\n            const v = this.indexToVec2(index);\n            const newValue = callback(value, v);\n            newContainer.setValue(v, newValue);\n        }\n        return newContainer;\n    }\n    foreach(callback) {\n        for (const [index, value] of Object.entries(this.items)) {\n            const v = this.indexToVec2(index);\n            callback(value, v);\n        }\n    }\n}\nexports.Dict2D2 = Dict2D2;\nclass Array2D {\n    width;\n    height;\n    array;\n    constructor(width, height, values) {\n        this.width = width;\n        this.height = height;\n        this.array = values;\n    }\n    static createWithDefaultValue(width, height, defaultValue) {\n        const values = new Array(width * height).fill(defaultValue);\n        return new Array2D(width, height, values);\n    }\n    length() {\n        return this.width * this.height;\n    }\n    getIndex(v) {\n        if (v.x >= 0 && v.y >= 0 && v.x < this.width && v.y < this.height) {\n            return v.y * this.width + v.x;\n        }\n        return -1;\n    }\n    setValue(v, value) {\n        const index = this.getIndex(v);\n        this.array[index] = value;\n    }\n    getValue(v) {\n        const index = this.getIndex(v);\n        return this.array[index];\n    }\n    toDictionary(filterFnc) {\n        const dict = {};\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const key = `${x} ${y}`;\n                const value = this.getValue({ x, y });\n                if (filterFnc(value)) {\n                    dict[key] = value;\n                }\n            }\n        }\n        return dict;\n    }\n    toFormattedString(formatValue) {\n        let output = '';\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const item = formatValue(this.getValue({ x, y }));\n                output += item + ' ';\n            }\n            output += '\\n';\n        }\n        return output;\n    }\n    map(callback) {\n        const newArray = [];\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const value = this.getValue({ x, y });\n                const newValue = callback(value, { x, y });\n                newArray.push(newValue);\n            }\n        }\n        return new Array2D(this.width, this.height, newArray);\n    }\n}\nexports.Array2D = Array2D;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/containers/array2d.ts?");

/***/ }),

/***/ "./src/containers/vec2.ts":
/*!********************************!*\
  !*** ./src/containers/vec2.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.strToVec = exports.vecToStr = exports.vec2AreEqual = exports.vec2Apply = exports.vec2Zero = exports.vec2Multiply = exports.vec2Divide = exports.vec2Add = exports.vec2Subtract = exports.scalarToVec2 = exports.vec2 = void 0;\nfunction vec2(x, y) {\n    return { x, y };\n}\nexports.vec2 = vec2;\nfunction scalarToVec2(z) {\n    return { x: z, y: z };\n}\nexports.scalarToVec2 = scalarToVec2;\nconst vec2Subtract = (v, u) => {\n    return { x: v.x - u.x, y: v.y - u.y };\n};\nexports.vec2Subtract = vec2Subtract;\nconst vec2Add = (v, u) => {\n    return { x: v.x + u.x, y: v.y + u.y };\n};\nexports.vec2Add = vec2Add;\nconst vec2Divide = (v, u) => {\n    return { x: v.x / u.x, y: v.y / u.y };\n};\nexports.vec2Divide = vec2Divide;\nconst vec2Multiply = (v, u) => {\n    return { x: v.x * u.x, y: v.y * u.y };\n};\nexports.vec2Multiply = vec2Multiply;\nconst vec2Zero = () => {\n    return { x: 0, y: 0 };\n};\nexports.vec2Zero = vec2Zero;\nconst vec2Apply = (v, fnc) => {\n    return { x: fnc(v.x), y: fnc(v.y) };\n};\nexports.vec2Apply = vec2Apply;\nconst vec2AreEqual = (u, v) => {\n    return u.x === v.x && u.y === v.y;\n};\nexports.vec2AreEqual = vec2AreEqual;\nconst vecToStr = (v) => `${v.x} ${v.y}`;\nexports.vecToStr = vecToStr;\nconst strToVec = (v) => {\n    let [x, y] = v.split(' ');\n    return { x: Number(x), y: Number(y) };\n};\nexports.strToVec = strToVec;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/containers/vec2.ts?");

/***/ }),

/***/ "./src/core/block.ts":
/*!***************************!*\
  !*** ./src/core/block.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isDirectionalBlock = exports.isMoveableBlock = exports.Movement = exports.isBlock = exports.getBlockName = exports.BlockType = exports.BlockMovement = void 0;\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nvar BlockMovement;\n(function (BlockMovement) {\n    BlockMovement[BlockMovement[\"Immovable\"] = 0] = \"Immovable\";\n    BlockMovement[BlockMovement[\"Moveable\"] = 1] = \"Moveable\";\n    BlockMovement[BlockMovement[\"Breaks\"] = 2] = \"Breaks\";\n})(BlockMovement || (exports.BlockMovement = BlockMovement = {}));\nvar BlockType;\n(function (BlockType) {\n    BlockType[\"Air\"] = \"Air\";\n    BlockType[\"RedstoneBlock\"] = \"RedstoneBlock\";\n    BlockType[\"RedstoneTorch\"] = \"RedstoneTorch\";\n    BlockType[\"Piston\"] = \"Piston\";\n    BlockType[\"PistonHead\"] = \"PistonHead\";\n    BlockType[\"GlassBlock\"] = \"GlassBlock\";\n    BlockType[\"RedstoneLamp\"] = \"RedstoneLamp\";\n    BlockType[\"RedstoneRepeater\"] = \"RedstoneRepeater\";\n    BlockType[\"RedstoneDust\"] = \"RedstoneDust\";\n    BlockType[\"WoolBlock\"] = \"WoolBlock\";\n    BlockType[\"Lever\"] = \"Lever\";\n    BlockType[\"Button\"] = \"Button\";\n    BlockType[\"ObserverBlock\"] = \"ObserverBlock\";\n    BlockType[\"ConcretePowder\"] = \"ConcretePowder\";\n    BlockType[\"Obsidian\"] = \"Obsidian\";\n    BlockType[\"TargetBlock\"] = \"TargetBlock\";\n    BlockType[\"RedstoneComparator\"] = \"RedstoneComparator\";\n    BlockType[\"RedstoneJunction\"] = \"RedstoneJunction\";\n    BlockType[\"RedstoneCauldron\"] = \"RedstoneCauldron\";\n    BlockType[\"SignBlock\"] = \"SignBlock\";\n})(BlockType || (exports.BlockType = BlockType = {}));\nconst getBlockName = (block) => {\n    return (0, general_1.toSnakeCase)(block.getName ? block.getName() : block.type);\n};\nexports.getBlockName = getBlockName;\nfunction isBlock(block, blockType) {\n    return block.type === blockType;\n}\nexports.isBlock = isBlock;\nvar Movement;\n(function (Movement) {\n    Movement[\"None\"] = \"None\";\n    Movement[\"Pending\"] = \"Pending\";\n    Movement[\"Complete\"] = \"Complete\";\n    // extension pending\n    // extension complete\n    // retraction pending\n    Movement[\"RetractionPending\"] = \"RetractionPending\";\n    Movement[\"RetractionComplete\"] = \"RetractionComplete\";\n    // slime???\n})(Movement || (exports.Movement = Movement = {}));\nfunction isMoveableBlock(block) {\n    return 'movement' in block;\n}\nexports.isMoveableBlock = isMoveableBlock;\nfunction isDirectionalBlock(block) {\n    return 'direction' in block;\n}\nexports.isDirectionalBlock = isDirectionalBlock;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/block.ts?");

/***/ }),

/***/ "./src/core/block_import.ts":
/*!**********************************!*\
  !*** ./src/core/block_import.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadBlockFiles = void 0;\nconst air_1 = __webpack_require__(/*! ../blocks/air */ \"./src/blocks/air.ts\");\nconst button_1 = __webpack_require__(/*! ../blocks/button */ \"./src/blocks/button.ts\");\nconst concrete_powder_1 = __webpack_require__(/*! ../blocks/concrete_powder */ \"./src/blocks/concrete_powder.ts\");\nconst glass_block_1 = __webpack_require__(/*! ../blocks/glass_block */ \"./src/blocks/glass_block.ts\");\nconst lever_1 = __webpack_require__(/*! ../blocks/lever */ \"./src/blocks/lever.ts\");\nconst observer_block_1 = __webpack_require__(/*! ../blocks/observer_block */ \"./src/blocks/observer_block.ts\");\nconst obsidian_1 = __webpack_require__(/*! ../blocks/obsidian */ \"./src/blocks/obsidian.ts\");\nconst piston_1 = __webpack_require__(/*! ../blocks/piston */ \"./src/blocks/piston.ts\");\nconst piston_head_1 = __webpack_require__(/*! ../blocks/piston_head */ \"./src/blocks/piston_head.ts\");\nconst redstone_block_1 = __webpack_require__(/*! ../blocks/redstone_block */ \"./src/blocks/redstone_block.ts\");\nconst redstone_cauldron_1 = __webpack_require__(/*! ../blocks/redstone_cauldron */ \"./src/blocks/redstone_cauldron.ts\");\nconst redstone_compator_1 = __webpack_require__(/*! ../blocks/redstone_compator */ \"./src/blocks/redstone_compator.ts\");\nconst redstone_dust_1 = __webpack_require__(/*! ../blocks/redstone_dust */ \"./src/blocks/redstone_dust.ts\");\nconst redstone_junction_1 = __webpack_require__(/*! ../blocks/redstone_junction */ \"./src/blocks/redstone_junction.ts\");\nconst redstone_lamp_1 = __webpack_require__(/*! ../blocks/redstone_lamp */ \"./src/blocks/redstone_lamp.ts\");\nconst redstone_repeater_1 = __webpack_require__(/*! ../blocks/redstone_repeater */ \"./src/blocks/redstone_repeater.ts\");\nconst redstone_torch_1 = __webpack_require__(/*! ../blocks/redstone_torch */ \"./src/blocks/redstone_torch.ts\");\nconst sign_block_1 = __webpack_require__(/*! ../blocks/sign_block */ \"./src/blocks/sign_block.ts\");\nconst target_block_1 = __webpack_require__(/*! ../blocks/target_block */ \"./src/blocks/target_block.ts\");\nconst wool_block_1 = __webpack_require__(/*! ../blocks/wool_block */ \"./src/blocks/wool_block.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst loadBlockFiles = () => {\n    const blocks = [\n        new air_1.Air({}),\n        new button_1.Button({}),\n        new concrete_powder_1.ConcretePowder({}),\n        new glass_block_1.GlassBlock({}),\n        new lever_1.Lever({}),\n        new observer_block_1.ObserverBlock({}),\n        new obsidian_1.Obsidian({}),\n        new piston_head_1.PistonHead({}),\n        new piston_1.Piston({}),\n        new redstone_block_1.RedstoneBlock({}),\n        new redstone_cauldron_1.RedstoneCauldron({}),\n        new redstone_compator_1.RedstoneComparator({}),\n        new redstone_dust_1.RedstoneDust({}),\n        new redstone_junction_1.RedstoneJunction({}),\n        new redstone_lamp_1.RedstoneLamp({}),\n        new redstone_repeater_1.RedstoneRepeater({}),\n        new redstone_torch_1.RedstoneTorch({}),\n        new sign_block_1.SignBlock({}),\n        new target_block_1.TargetBlock({}),\n        new wool_block_1.WoolBlock({})\n    ];\n    console.log('blocks imported', {\n        blocks,\n        variants: (0, block_variants_1.getAllBlockVariants)()\n    });\n};\nexports.loadBlockFiles = loadBlockFiles;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/block_import.ts?");

/***/ }),

/***/ "./src/core/command_line.ts":
/*!**********************************!*\
  !*** ./src/core/command_line.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initialiseCommandLine = exports.initCommandLineEventListeners = exports.isCommandLineCurrentlyVisible = exports.buildCommandSuggestions = exports.CommandManager = exports.commandFailure = exports.commandSuccess = exports.commandInfo = exports.mapCommandOutputToEmoji = void 0;\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst save_1 = __webpack_require__(/*! ../utils/save */ \"./src/utils/save.ts\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/core/storage.ts\");\nconst user_input_1 = __webpack_require__(/*! ./user_input */ \"./src/core/user_input.ts\");\nconst commandLineElement = document.getElementById('command-line');\nconst commandListElement = document.getElementById('command-list');\nconst commandListWrapperElement = document.getElementById('command-list-wrapper');\nconst commandListHeadingElement = document.getElementById('command-list-heading');\nvar CommandOutputType;\n(function (CommandOutputType) {\n    CommandOutputType[\"Success\"] = \"Success\";\n    CommandOutputType[\"Failure\"] = \"Failure\";\n    CommandOutputType[\"Info\"] = \"Info\";\n})(CommandOutputType || (CommandOutputType = {}));\nconst mapCommandOutputToEmoji = (outputType) => {\n    switch (outputType) {\n        case CommandOutputType.Success:\n            return '🟢';\n        case CommandOutputType.Failure:\n            return '🔴';\n        case CommandOutputType.Info:\n            return '🔵';\n    }\n};\nexports.mapCommandOutputToEmoji = mapCommandOutputToEmoji;\nconst commandInfo = (message) => {\n    return {\n        type: CommandOutputType.Info,\n        message\n    };\n};\nexports.commandInfo = commandInfo;\nconst commandSuccess = (message) => {\n    return {\n        type: CommandOutputType.Success,\n        message\n    };\n};\nexports.commandSuccess = commandSuccess;\nconst commandFailure = (message) => {\n    return {\n        type: CommandOutputType.Failure,\n        message\n    };\n};\nexports.commandFailure = commandFailure;\nclass CommandManager {\n    commands = [];\n    history = new save_1.LocalStorageVariable({\n        defaultValue: [],\n        localStorageKey: 'command-history',\n        saveInterval: 0\n    });\n    outputs = new save_1.LocalStorageVariable({\n        defaultValue: [],\n        localStorageKey: 'command-outputs',\n        saveInterval: 0\n    });\n    outputSuccessMessages = new save_1.LocalStorageVariable({\n        defaultValue: true,\n        localStorageKey: 'output-command-success-messages',\n        saveInterval: 0\n    });\n    createCommand(pattern, callback) {\n        this.commands.push({ pattern, callback });\n    }\n    addHistory(item) {\n        const newHistory = this.history.get().filter(command => command !== item);\n        this.history.set([item, ...newHistory.slice(0, 50)]);\n        // only keep last 50 items in history\n    }\n    ifCommandGetInputs(input, command) {\n        const inputs = {};\n        const commandParts = command.split(' ');\n        const inputParts = input.split(' ');\n        if (commandParts.length !== inputParts.length) {\n            return null;\n        }\n        for (const [commandPart, inputPart] of (0, general_1.zipArrays)(commandParts, inputParts)) {\n            if (commandPart[0] != '{' && commandPart !== inputPart) {\n                return null;\n            }\n            const input_name = commandPart.split(':')[0].slice(1);\n            const input_value = inputPart;\n            inputs[input_name] = input_value;\n        }\n        return inputs;\n    }\n    getVisibleOutputs() {\n        return [...this.outputs.get()].reverse().filter(command => {\n            return !(command.type === CommandOutputType.Success &&\n                !this.outputSuccessMessages.get());\n        });\n    }\n    isCommandPartialMatch(input, command) {\n        if (input === '')\n            return true;\n        const commandParts = command.split(' ');\n        const inputParts = input.split(' ');\n        if (inputParts.length > commandParts.length) {\n            return false;\n        }\n        const n = inputParts.length;\n        for (let i = 0; i < n - 1; i++) {\n            const commandPart = commandParts[i];\n            const inputPart = inputParts[i];\n            if (commandPart[0] != '{' && commandPart !== inputPart) {\n                return false;\n            }\n        }\n        const commandPart = commandParts[n - 1];\n        const inputPart = inputParts[n - 1];\n        if (commandPart[0] != '{' && !commandPart.startsWith(inputPart)) {\n            return false;\n        }\n        return true;\n    }\n    getNextHistoryIndex(input) {\n        const history = this.history.get();\n        if (history.length === 0)\n            return 0;\n        const currentCommandIndex = history.findIndex(item => item === input);\n        let newCommand;\n        if (currentCommandIndex < 0) {\n            return 0;\n        }\n        else {\n            return (currentCommandIndex + 1) % history.length;\n        }\n    }\n    getNextHintItem(input) {\n        const viableCommands = this.commands.filter(command => this.isCommandPartialMatch(input, command.pattern));\n        if (viableCommands.length === 0)\n            return '';\n        const currentCommandIndex = this.commands.findIndex(item => item.pattern === input);\n        // console.log({ input, viableCommands, currentCommandIndex })\n        let newCommand;\n        if (currentCommandIndex > 0) {\n            newCommand = viableCommands[0];\n        }\n        else {\n            newCommand =\n                viableCommands[(currentCommandIndex + 1) % this.history.get().length];\n        }\n        return replaceCommandPlaceholders(newCommand.pattern);\n    }\n    addOutput(output) {\n        // only store last 50 outputs\n        this.outputs.set([output, ...this.outputs.get().slice(0, 50)]);\n    }\n    async ifCommandExecute(input) {\n        for (const command of this.commands) {\n            const inputs = this.ifCommandGetInputs(input, command.pattern);\n            // console.log({ inputs, input, cmd: command.pattern })\n            if (inputs) {\n                this.addHistory(input);\n                const output = await command.callback(inputs);\n                this.addOutput(output);\n                return;\n            }\n        }\n        this.addOutput((0, exports.commandFailure)(`command '${input}' not recognised`));\n    }\n}\nexports.CommandManager = CommandManager;\nconst replaceCommandPlaceholders = (input) => {\n    // replaces anything in curley braces with a question mark\n    return input.replace(/\\{[^}]+\\}/g, '?');\n};\nconst focusEndOfCommandLine = () => {\n    commandLineElement.focus();\n    // Set cursor position at the end of the string\n    const inputValueLength = commandLineElement.value.length;\n    commandLineElement.setSelectionRange(inputValueLength, inputValueLength);\n};\nconst hideCommandListWrapperIfEmpty = () => {\n    if (commandListElement.childElementCount === 0) {\n        commandListWrapperElement.style.display = 'none';\n    }\n    else {\n        commandListWrapperElement.style.display = '';\n    }\n};\nconst buildCommandSuggestions = (cm) => {\n    commandListElement.innerHTML = '';\n    commandListHeadingElement.textContent = 'HINT';\n    const input = commandLineElement.value;\n    const viableCommands = cm.commands.filter(command => cm.isCommandPartialMatch(input, command.pattern));\n    viableCommands.sort((a, b) => a.pattern.localeCompare(b.pattern));\n    viableCommands.forEach(command => {\n        const commandItem = document.createElement('div');\n        commandItem.classList.add('command-item');\n        commandItem.textContent = command.pattern;\n        commandItem.onclick = () => {\n            commandLineElement.value = replaceCommandPlaceholders(command.pattern);\n            focusEndOfCommandLine();\n        };\n        commandListElement.appendChild(commandItem);\n    });\n    setTimeout(() => {\n        hideCommandListWrapperIfEmpty();\n        commandListElement.scrollTop = 0;\n    }, 0);\n};\nexports.buildCommandSuggestions = buildCommandSuggestions;\nconst buildCommandHistory = (cm) => {\n    commandListElement.innerHTML = '';\n    commandListHeadingElement.textContent = 'HISTORY';\n    const history = cm.history.get();\n    if (history.length === 0) {\n        // const commandItem = document.createElement('div')\n        // commandItem.classList.add('command-item')\n        // commandItem.textContent = 'no history'\n        // commandListElement.appendChild(commandItem)\n    }\n    else {\n        ;\n        [...history].reverse().forEach(command => {\n            const commandItem = document.createElement('div');\n            commandItem.classList.add('command-item');\n            commandItem.textContent = command;\n            commandItem.onclick = () => {\n                commandLineElement.value = command;\n                focusEndOfCommandLine();\n            };\n            commandListElement.appendChild(commandItem);\n        });\n    }\n    setTimeout(() => {\n        hideCommandListWrapperIfEmpty();\n        commandListElement.scrollTop = commandListElement.scrollHeight;\n    }, 0);\n};\nconst buildCommandOutput = (cm) => {\n    commandListHeadingElement.textContent = 'OUTPUT';\n    commandListElement.innerHTML = '';\n    const outputs = cm.getVisibleOutputs();\n    if (outputs.length === 0) {\n        // const commandItem = document.createElement('div')\n        // commandItem.classList.add('command-item')\n        // commandItem.textContent = 'no outputs'\n        // commandListElement.appendChild(commandItem)\n    }\n    else {\n        outputs.forEach(command => {\n            const commandItem = document.createElement('div');\n            commandItem.classList.add('command-item');\n            commandItem.textContent = `${(0, exports.mapCommandOutputToEmoji)(command.type)} ${command.message}`;\n            commandListElement.appendChild(commandItem);\n        });\n    }\n    setTimeout(() => {\n        hideCommandListWrapperIfEmpty();\n        commandListElement.scrollTop = commandListElement.scrollHeight;\n    }, 0);\n};\nconst isCommandLineCurrentlyVisible = () => {\n    return commandLineElement === document.activeElement;\n};\nexports.isCommandLineCurrentlyVisible = isCommandLineCurrentlyVisible;\nconst initCommandLineEventListeners = (cm) => {\n    document.addEventListener('keydown', event => {\n        if (!(0, user_input_1.isBodyCurrentlyFocused)()) {\n            return;\n        }\n        if (event.key === '/') {\n            if (commandLineElement !== document.activeElement &&\n                ['', '/'].includes(commandLineElement.value)) {\n                event.preventDefault();\n                commandLineElement.value = '/';\n            }\n            focusEndOfCommandLine();\n        }\n    });\n    let hintItemIndex = 0;\n    const selectCommandListItem = (doClick = true) => {\n        if (commandListElement.children.length === 0) {\n            return;\n        }\n        if (hintItemIndex < 0 ||\n            hintItemIndex >= commandListElement.children.length) {\n            hintItemIndex = 0;\n        }\n        const selectedCommandItem = commandListElement.children[hintItemIndex % commandListElement.children.length];\n        Array.from(commandListElement.children).forEach(item => item.classList.remove('selected'));\n        selectedCommandItem.classList.add('selected');\n        if (doClick)\n            selectedCommandItem.click();\n        selectedCommandItem.scrollIntoView();\n        return selectedCommandItem;\n    };\n    const nextCommandListItem = (offset, isAbs) => {\n        if (isAbs) {\n            hintItemIndex += offset;\n        }\n        else if (commandListHeadingElement.textContent === 'HISTORY') {\n            hintItemIndex -= offset;\n        }\n        else {\n            hintItemIndex += offset;\n        }\n        if (hintItemIndex < 0) {\n            hintItemIndex = commandListElement.children.length - 1;\n        }\n        else if (hintItemIndex >= commandListElement.children.length) {\n            hintItemIndex = 0;\n        }\n        // console.log(hintItemIndex, commandListElement.children.length)\n        selectCommandListItem();\n        setTimeout(() => focusEndOfCommandLine(), 0);\n    };\n    commandLineElement.addEventListener('keydown', async (event) => {\n        if (event.key === 'Enter') {\n            // on enter run command or exit command line\n            const command = commandLineElement.value;\n            if (['', '/'].includes(command)) {\n                commandListWrapperElement.style.display = 'none';\n                commandLineElement.blur();\n            }\n            else {\n                await cm.ifCommandExecute(command);\n            }\n            commandLineElement.value = '';\n        }\n        else if (event.key === 'Tab') {\n            nextCommandListItem(1, false);\n            event.preventDefault();\n        }\n        else if (event.key === 'ArrowUp') {\n            if ([''].includes(commandLineElement.value) &&\n                commandListHeadingElement.textContent !== 'HISTORY') {\n                commandLineElement.value = cm.history.get()[0];\n                setTimeout(() => {\n                    buildCommandHistory(cm);\n                    focusEndOfCommandLine();\n                    hintItemIndex = commandListElement.children.length - 1;\n                    selectCommandListItem();\n                }, 0);\n            }\n            else {\n                nextCommandListItem(-1, true);\n            }\n        }\n        else if (event.key === 'ArrowDown') {\n            nextCommandListItem(1, true);\n        }\n        else if (event.key === 'Tab' && event.shiftKey) {\n            nextCommandListItem(-1, false);\n            event.preventDefault();\n        }\n        if (!['ArrowUp', 'Tab', 'ArrowDown'].includes(event.key)) {\n            hintItemIndex = -1;\n        }\n        setTimeout(() => {\n            if (commandLineElement.value === '' && cm.outputs.get().length > 0) {\n                buildCommandOutput(cm);\n            }\n            else if (!['ArrowUp', 'Tab', 'Enter', 'ArrowDown'].includes(event.key)) {\n                (0, exports.buildCommandSuggestions)(cm);\n                // setTimeout(() => {\n                //   selectCommandListItem(false)\n                // }, 0)\n            }\n        }, 0);\n    });\n    let commandLineExitTimeout;\n    // on focus of the command line show suggestions\n    commandLineElement.onfocus = () => {\n        clearTimeout(commandLineExitTimeout);\n        if (commandLineElement.value === '' && cm.outputs.get().length > 0) {\n            buildCommandOutput(cm);\n        }\n        else {\n            (0, exports.buildCommandSuggestions)(cm);\n        }\n        commandListWrapperElement.style.display = '';\n    };\n    // on blur of the command line hide suggestions after delay\n    commandLineElement.onblur = () => {\n        commandLineExitTimeout = setTimeout(() => {\n            if (commandLineElement !== document.activeElement) {\n                commandListWrapperElement.style.display = 'none';\n            }\n        }, 100);\n    };\n};\nexports.initCommandLineEventListeners = initCommandLineEventListeners;\nconst initialiseCommandLine = () => {\n    storage_1.storage.commandLineVisibilityState = new save_1.LocalStorageVariable({\n        defaultValue: true,\n        localStorageKey: 'show-command-line',\n        saveInterval: 0,\n        setCallback: (isCommandLineVisible) => {\n            if (isCommandLineVisible) {\n                commandLineElement.classList.remove('invisible-on-blur');\n            }\n            else {\n                commandLineElement.classList.add('invisible-on-blur');\n            }\n        }\n    });\n};\nexports.initialiseCommandLine = initialiseCommandLine;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/command_line.ts?");

/***/ }),

/***/ "./src/core/commands.ts":
/*!******************************!*\
  !*** ./src/core/commands.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initialiseCommands = exports.clearFallingBlocksRequested = void 0;\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst save_1 = __webpack_require__(/*! ../utils/save */ \"./src/utils/save.ts\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./src/core/block.ts\");\nconst command_line_1 = __webpack_require__(/*! ./command_line */ \"./src/core/command_line.ts\");\nconst game_loop_1 = __webpack_require__(/*! ./game_loop */ \"./src/core/game_loop.ts\");\nconst inventory_1 = __webpack_require__(/*! ./inventory */ \"./src/core/inventory.ts\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/core/storage.ts\");\nconst world_loading_1 = __webpack_require__(/*! ./world_loading */ \"./src/core/world_loading.ts\");\nexports.clearFallingBlocksRequested = new save_1.LocalStorageVariable({\n    defaultValue: false\n});\nconst initialiseCommands = (commandManager, blocks, canvas, fillUpdateQueue) => {\n    commandManager.createCommand('/world load by_name {name:string}', async (input) => {\n        blocks.clone(await (0, world_loading_1.createDemoWorld)());\n        // blocks.chunks = (await loadChunksFromStorage(false, true)).chunks\n        // updateCanvas()\n        (0, game_loop_1.updateCanvasBlocks)(blocks, canvas);\n        fillUpdateQueue();\n        return (0, command_line_1.commandSuccess)(`loaded world ${input.name}`);\n    });\n    commandManager.createCommand('/world load from_compressed {data:string}', async (input) => {\n        const newBlocks = (0, world_loading_1.createEmptyBlockContainer)();\n        const chunks = (0, save_1.decompressObject)(input.data);\n        (0, world_loading_1.loadChunks)(chunks, newBlocks);\n        blocks.clone(newBlocks);\n        console.log(newBlocks, blocks, chunks, input.data);\n        return (0, command_line_1.commandSuccess)(`loaded world from compressed data`);\n    });\n    commandManager.createCommand('/world load selected_from_compressed {data:string}', async (input) => {\n        const newBlocks = (0, world_loading_1.createEmptyBlockContainer)();\n        const chunks = (0, save_1.decompressObject)(input.data);\n        (0, world_loading_1.loadChunks)(chunks, newBlocks);\n        storage_1.storage.selectedBlockStorage.set(newBlocks);\n        return (0, command_line_1.commandSuccess)(`loaded compressed block data into selection`);\n    });\n    commandManager.createCommand('/world clear', async () => {\n        // blocks.chunks = (await loadChunksFromStorage(false, false)).chunks\n        blocks.clone((0, world_loading_1.createEmptyWorld)());\n        // placeAllBlocks(blocks)\n        // updateCanvas()\n        (0, game_loop_1.updateCanvasBlocks)(blocks, canvas);\n        fillUpdateQueue();\n        return (0, command_line_1.commandSuccess)(`cleared world`);\n    });\n    commandManager.createCommand('/clear falling_blocks', async () => {\n        exports.clearFallingBlocksRequested.set(true);\n        return (0, command_line_1.commandSuccess)(`cleared falling blocks`);\n    });\n    commandManager.createCommand('/teleport {x:float} {y:float}', async (input) => {\n        const x = Number(input.x), y = Number(input.y);\n        if (isNaN(x) || isNaN(y)) {\n            return (0, command_line_1.commandFailure)(`failed to teleport. x or y is not a valid number`);\n        }\n        canvas.moveTo({ x, y });\n        return (0, command_line_1.commandSuccess)(`teleported to {x: ${x}, y: ${y}}`);\n    });\n    commandManager.createCommand('/set scale {pixels_per_block:float}', async (input) => {\n        const x = Number(input.pixels_per_block);\n        if (isNaN(x)) {\n            return (0, command_line_1.commandFailure)(`failed to scale. pixels_per_block is not a valid number`);\n        }\n        canvas.setScale(x);\n        return (0, command_line_1.commandSuccess)(`set world scale to ${x} pixels per block`);\n    });\n    commandManager.createCommand('/world download', async (input) => {\n        (0, world_loading_1.downloadWorld)(blocks, false);\n        return (0, command_line_1.commandSuccess)(`downloaded world`);\n    });\n    commandManager.createCommand('/world download compressed', async (input) => {\n        (0, world_loading_1.downloadWorld)(blocks, true);\n        return (0, command_line_1.commandSuccess)(`downloaded compressed world`);\n    });\n    commandManager.createCommand('/world download selected', async (input) => {\n        (0, world_loading_1.downloadWorld)(storage_1.storage.selectedBlockStorage.get(), false);\n        return (0, command_line_1.commandSuccess)(`downloaded selected world`);\n    });\n    commandManager.createCommand('/world download selected compressed', async (input) => {\n        (0, world_loading_1.downloadWorld)(storage_1.storage.selectedBlockStorage.get(), true);\n        return (0, command_line_1.commandSuccess)(`downloaded compressed selected world`);\n    });\n    commandManager.createCommand('/toggle view_subticks', async () => {\n        storage_1.storage.viewSubTicksState.set(!storage_1.storage.viewSubTicksState.get());\n        return (0, command_line_1.commandSuccess)(`toggled view subticks to ${storage_1.storage.viewSubTicksState.get()}`);\n    });\n    commandManager.createCommand('/toggle view_signal_strength', async () => {\n        storage_1.storage.viewSignalStrengthState.set(!storage_1.storage.viewSignalStrengthState.get());\n        return (0, command_line_1.commandSuccess)(`toggled view signal strength to ${storage_1.storage.viewSignalStrengthState.get()}`);\n    });\n    commandManager.createCommand('/set updates_per_second {ups:float}', async (input) => {\n        const ups = Number(input.ups);\n        if (!isNaN(ups)) {\n            storage_1.storage.updatesPerSecondState.set(ups);\n            return (0, command_line_1.commandSuccess)(`set updates per second ${ups}`);\n        }\n        else {\n            return (0, command_line_1.commandFailure)(`updates per second was not a number`);\n        }\n    });\n    commandManager.createCommand('/set frames_per_second {fps:float}', async (input) => {\n        const ups = Number(input.fps);\n        if (!isNaN(ups)) {\n            storage_1.storage.framesPerSecondState.set(ups);\n            return (0, command_line_1.commandSuccess)(`set frames per second ${ups}`);\n        }\n        else {\n            return (0, command_line_1.commandFailure)(`frames per second was not a number`);\n        }\n    });\n    commandManager.createCommand('/toggle debug_window', async (input) => {\n        if (storage_1.storage.debugPanelState.get()) {\n            storage_1.storage.debugPanelState.set(false);\n            return (0, command_line_1.commandSuccess)('debug window hidden');\n        }\n        else {\n            storage_1.storage.debugPanelState.set(true);\n            return (0, command_line_1.commandSuccess)('debug window revealed');\n        }\n    });\n    commandManager.createCommand('/toggle command_line_visibility', async (input) => {\n        if (storage_1.storage.commandLineVisibilityState.get()) {\n            storage_1.storage.commandLineVisibilityState.set(false);\n            return (0, command_line_1.commandSuccess)('command line hidden');\n        }\n        else {\n            storage_1.storage.commandLineVisibilityState.set(true);\n            return (0, command_line_1.commandSuccess)('command line revealed');\n        }\n    });\n    commandManager.createCommand('/toggle output_command_success', async (input) => {\n        if (commandManager.outputSuccessMessages.get()) {\n            commandManager.outputSuccessMessages.set(false);\n            return (0, command_line_1.commandSuccess)('command success messages hidden');\n        }\n        else {\n            commandManager.outputSuccessMessages.set(true);\n            return (0, command_line_1.commandSuccess)('command success messages revealed');\n        }\n    });\n    commandManager.createCommand('/clear command_output', async (input) => {\n        commandManager.outputs.set([]);\n        return (0, command_line_1.commandSuccess)('cleared command output history');\n    });\n    commandManager.createCommand('/block list', async (_) => {\n        const blockList = (0, block_variants_1.getAllBlockVariants)()\n            .map(block_1.getBlockName)\n            .join(', ');\n        // (Object.values(BlockType) as String[]).join(', ')\n        return (0, command_line_1.commandInfo)(`blocks: ${blockList}`);\n    });\n    commandManager.createCommand('/block pick {name:string}', async (input) => {\n        // const block = (convertStringToObject(input.type) as unknown) as BlockState\n        const block = (0, block_variants_1.getBlockFromAlias)(input.name);\n        if (block) {\n            // storage.selectedBlockState.set(block)\n            (0, inventory_1.setInventorySlot)(block);\n            return (0, command_line_1.commandSuccess)(`picked block ${input.name}`);\n        }\n        else {\n            return (0, command_line_1.commandFailure)(`cannot pick invalid block ${input.name}`);\n        }\n    });\n    // commandManager.createCommand(\n    //   '/block pick {type:string} {meta:string}',\n    //   async input => {\n    //     const block = (convertStringToObject(\n    //       `${input.type} ${input.meta}`\n    //     ) as unknown) as BlockState\n    //     console.log(block)\n    //     if (\n    //       isEnum<BlockType>(block.type as BlockType, Object.values(BlockType))\n    //     ) {\n    //       storage.selectedBlockState.set(block)\n    //       return commandSuccess(\n    //         `picked block ${convertObjectToString(\n    //           (block as unknown) as Record<string, string>\n    //         )}`\n    //       )\n    //     } else {\n    //       return commandFailure(\n    //         `cannot pick invalid block ${convertObjectToString(\n    //           (block as unknown) as Record<string, string>\n    //         )}`\n    //       )\n    //     }\n    //   }\n    // )\n};\nexports.initialiseCommands = initialiseCommands;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/commands.ts?");

/***/ }),

/***/ "./src/core/debug_panel.ts":
/*!*********************************!*\
  !*** ./src/core/debug_panel.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateDebugInfo = exports.initialiseDebugPanel = void 0;\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst save_1 = __webpack_require__(/*! ../utils/save */ \"./src/utils/save.ts\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/core/storage.ts\");\nconst debugPanel = document.getElementById('debug-panel');\nconst initialiseDebugPanel = () => {\n    storage_1.storage.debugPanelState = new save_1.LocalStorageVariable({\n        defaultValue: true,\n        localStorageKey: 'show-debug-panel',\n        saveInterval: 0,\n        setCallback: (showDebugPanel) => {\n            debugPanel.style.display = showDebugPanel ? '' : 'none';\n        }\n    });\n};\nexports.initialiseDebugPanel = initialiseDebugPanel;\nconst updateDebugInfo = () => {\n    debugPanel.innerHTML = '';\n    const varWidth = 20;\n    const targetTicksPerSecond = storage_1.storage.viewSubTicksState.get()\n        ? ''\n        : ` [${storage_1.storage.updatesPerSecondState.get()}]`;\n    const targetSubticksPerSecond = storage_1.storage.viewSubTicksState.get()\n        ? ` [${storage_1.storage.updatesPerSecondState.get()}]`\n        : '';\n    const variables = [\n        // `${invisibleRightPad('Selected', varWidth - 2)} ${convertObjectToString(\n        //   (storage.selectedBlockState.get() as unknown) as Record<string, string>\n        // )}`,\n        `${(0, general_1.invisibleRightPad)('Tick', varWidth + 2)} ${storage_1.storage.tickState.get()}`,\n        `${(0, general_1.invisibleRightPad)('Subtick', varWidth - 2)} ${storage_1.storage.subtickState.get()}`,\n        `${(0, general_1.invisibleRightPad)('Ticks/s', varWidth - 1)} ${storage_1.storage.actualTicksPerSecondState.get()}${targetTicksPerSecond}`,\n        `${(0, general_1.invisibleRightPad)('Subicks/s', varWidth - 3)} ${storage_1.storage.actualSubticksPerSecondState.get()}${targetSubticksPerSecond}`,\n        `${(0, general_1.invisibleRightPad)('Frames/s', varWidth - 3)} ${storage_1.storage.actualFramesPerSecondState.get()} [${storage_1.storage.framesPerSecondState.get()}]`,\n        `${(0, general_1.invisibleRightPad)('Updates/s', varWidth - 3)} ${storage_1.storage.actualUpdatesPerSecondState.get()}`\n    ];\n    variables.forEach(value => {\n        const item = document.createElement('div');\n        item.textContent = String(value);\n        debugPanel.appendChild(item);\n    });\n};\nexports.updateDebugInfo = updateDebugInfo;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/debug_panel.ts?");

/***/ }),

/***/ "./src/core/direction.ts":
/*!*******************************!*\
  !*** ./src/core/direction.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAllDirections = exports.directionToVec2 = exports.getRelativeDirection = exports.getOppositeDirection = exports.getOtherDirections = exports.Direction = void 0;\nvar Direction;\n(function (Direction) {\n    Direction[\"Up\"] = \"Up\";\n    Direction[\"Down\"] = \"Down\";\n    Direction[\"Left\"] = \"Left\";\n    Direction[\"Right\"] = \"Right\";\n})(Direction || (exports.Direction = Direction = {}));\nconst getOtherDirections = (direction) => {\n    switch (direction) {\n        case Direction.Up:\n            return [Direction.Left, Direction.Right, Direction.Down];\n        case Direction.Down:\n            return [Direction.Left, Direction.Right, Direction.Up];\n        case Direction.Left:\n            return [Direction.Up, Direction.Right, Direction.Down];\n        case Direction.Right:\n            return [Direction.Left, Direction.Up, Direction.Down];\n    }\n};\nexports.getOtherDirections = getOtherDirections;\nconst getOppositeDirection = (direction) => {\n    switch (direction) {\n        case Direction.Up:\n            return Direction.Down;\n        case Direction.Down:\n            return Direction.Up;\n        case Direction.Left:\n            return Direction.Right;\n        case Direction.Right:\n            return Direction.Left;\n    }\n};\nexports.getOppositeDirection = getOppositeDirection;\nconst getRelativeDirection = (facing, turn) => {\n    switch (facing) {\n        case Direction.Up:\n            return turn;\n        case Direction.Down:\n            switch (turn) {\n                case Direction.Up:\n                    return Direction.Down;\n                case Direction.Down:\n                    return Direction.Up;\n                case Direction.Left:\n                    return Direction.Right;\n                case Direction.Right:\n                    return Direction.Left;\n            }\n        case Direction.Left:\n            switch (turn) {\n                case Direction.Up:\n                    return Direction.Left;\n                case Direction.Down:\n                    return Direction.Right;\n                case Direction.Left:\n                    return Direction.Down;\n                case Direction.Right:\n                    return Direction.Up;\n            }\n        case Direction.Right:\n            switch (turn) {\n                case Direction.Up:\n                    return Direction.Right;\n                case Direction.Down:\n                    return Direction.Left;\n                case Direction.Left:\n                    return Direction.Up;\n                case Direction.Right:\n                    return Direction.Down;\n            }\n    }\n};\nexports.getRelativeDirection = getRelativeDirection;\nconst directionToVec2 = (direction) => {\n    switch (direction) {\n        case Direction.Up:\n            return { x: 0, y: 1 };\n        case Direction.Down:\n            return { x: 0, y: -1 };\n        case Direction.Left:\n            return { x: -1, y: 0 };\n        case Direction.Right:\n            return { x: 1, y: 0 };\n    }\n};\nexports.directionToVec2 = directionToVec2;\nconst getAllDirections = () => {\n    const directions = Object.values(Direction);\n    return directions;\n};\nexports.getAllDirections = getAllDirections;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/direction.ts?");

/***/ }),

/***/ "./src/core/game_loop.ts":
/*!*******************************!*\
  !*** ./src/core/game_loop.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createLogicLoop = exports.updateBlocksWithQueue = exports.subUpdateBlocksWithQueue = exports.updateCanvasBlocks = exports.ProcessLoop = exports.RenderLoop = exports.startLoop = exports.startRenderLoop = exports.Game = void 0;\nconst air_1 = __webpack_require__(/*! ../blocks/air */ \"./src/blocks/air.ts\");\nconst concrete_powder_1 = __webpack_require__(/*! ../blocks/concrete_powder */ \"./src/blocks/concrete_powder.ts\");\nconst vec2_1 = __webpack_require__(/*! ../containers/vec2 */ \"./src/containers/vec2.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./src/core/block.ts\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"./src/core/commands.ts\");\nconst direction_1 = __webpack_require__(/*! ./direction */ \"./src/core/direction.ts\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/core/storage.ts\");\nclass Game {\n    lastUpdateTime = 0;\n    updateTimeStep;\n    updateCallback;\n    canTimeStep = false;\n    hasUpdateCompleted = true;\n    constructor(updatesPerSecond, updateCallback) {\n        this.updateTimeStep = 1000 / updatesPerSecond;\n        this.updateCallback = updateCallback;\n        this.canTimeStep = false;\n    }\n    setUpdateComplete() {\n        this.hasUpdateCompleted = true;\n    }\n    allowTimeStep() {\n        this.canTimeStep = true;\n    }\n    setUpdatesPerSecond(updatesPerSecond) {\n        if (updatesPerSecond <= 0) {\n            this.updateTimeStep = 0;\n        }\n        else {\n            this.updateTimeStep = 1000 / updatesPerSecond;\n        }\n    }\n    update = (currentTime) => {\n        if (this.hasUpdateCompleted) {\n            let deltaTime = currentTime - this.lastUpdateTime;\n            if (this.canTimeStep ||\n                (this.updateTimeStep > 0 && deltaTime >= this.updateTimeStep)) {\n                this.canTimeStep = false;\n                this.hasUpdateCompleted = false;\n                this.updateCallback();\n                this.lastUpdateTime = currentTime - (deltaTime % this.updateTimeStep);\n                if (isNaN(this.lastUpdateTime)) {\n                    this.lastUpdateTime = 0;\n                }\n            }\n        }\n        requestAnimationFrame(this.update);\n    };\n    startGameLoop = () => {\n        requestAnimationFrame(this.update);\n    };\n}\nexports.Game = Game;\nconst startRenderLoop = (targetFrameRate, callback) => {\n    let lastElapsedMilliseconds = 0;\n    let deltaMilliseconds = 0;\n    const fnc = (elapsedMilliseconds) => {\n        deltaMilliseconds += elapsedMilliseconds - lastElapsedMilliseconds;\n        const targetFramePeriodMilliseconds = 1000 / targetFrameRate.get();\n        if (deltaMilliseconds > targetFramePeriodMilliseconds) {\n            callback(deltaMilliseconds);\n            deltaMilliseconds = 0;\n        }\n        lastElapsedMilliseconds = elapsedMilliseconds;\n        requestAnimationFrame(fnc);\n    };\n    requestAnimationFrame(fnc);\n};\nexports.startRenderLoop = startRenderLoop;\nconst startLoop = async (targetFrameRate, callback) => {\n    let lastTimeMilliseconds = performance.now();\n    // let frames = 0\n    // setInterval(() => {\n    //   console.log({ frames })\n    //   frames  0\n    // }, 1000)\n    while (true) {\n        const currentTimeMilliseconds = performance.now();\n        const deltaMilliseconds = currentTimeMilliseconds - lastTimeMilliseconds;\n        const targetFramePeriodMilliseconds = 1000 / targetFrameRate.get();\n        if (deltaMilliseconds > targetFramePeriodMilliseconds) {\n            callback(deltaMilliseconds);\n            // frames += 1\n            lastTimeMilliseconds = currentTimeMilliseconds;\n            await (0, general_1.sleep)(0);\n        }\n        else {\n            await (0, general_1.sleep)(deltaMilliseconds);\n        }\n    }\n};\nexports.startLoop = startLoop;\nclass RenderLoop {\n    stopRequested;\n    targetFramePeriodMilliseconds;\n    callback;\n    isRunning;\n    constructor(frameRate, callback) {\n        this.stopRequested = false;\n        this.targetFramePeriodMilliseconds = 1000 / frameRate;\n        this.callback = callback;\n        this.isRunning = false;\n    }\n    stop() {\n        this.stopRequested = true;\n    }\n    setFrameRate(frameRate) {\n        this.targetFramePeriodMilliseconds = 1000 / frameRate;\n    }\n    async start() {\n        if (this.isRunning)\n            return;\n        this.isRunning = true;\n        this.stopRequested = false;\n        let lastElapsedMilliseconds = 0;\n        const fnc = async (elapsedMilliseconds) => {\n            if (this.stopRequested) {\n                this.isRunning = false;\n            }\n            const deltaMilliseconds = elapsedMilliseconds - lastElapsedMilliseconds;\n            if (deltaMilliseconds > this.targetFramePeriodMilliseconds) {\n                const overshoot = deltaMilliseconds - this.targetFramePeriodMilliseconds;\n                this.callback(deltaMilliseconds);\n                lastElapsedMilliseconds = elapsedMilliseconds - overshoot;\n            }\n            else {\n                const remainingTimeMilliseconds = this.targetFramePeriodMilliseconds - deltaMilliseconds;\n                await (0, general_1.sleep)(Math.max(remainingTimeMilliseconds - 5, 0));\n            }\n            requestAnimationFrame(fnc);\n        };\n        requestAnimationFrame(fnc);\n    }\n}\nexports.RenderLoop = RenderLoop;\nclass ProcessLoop {\n    stopRequested;\n    targetFramePeriodMilliseconds;\n    callback;\n    isRunning;\n    constructor(frameRate, callback) {\n        this.stopRequested = false;\n        this.targetFramePeriodMilliseconds = Math.floor(1000 / frameRate);\n        this.callback = callback;\n        this.isRunning = false;\n    }\n    stop() {\n        this.stopRequested = true;\n    }\n    setFrameRate(frameRate) {\n        this.targetFramePeriodMilliseconds = Math.floor(1000 / frameRate);\n    }\n    async start() {\n        if (this.isRunning)\n            return;\n        this.isRunning = true;\n        this.stopRequested = false;\n        let lastSleepTime = (0, general_1.now)();\n        let lastTimeMilliseconds = (0, general_1.now)();\n        while (!this.stopRequested) {\n            const currentTimeMilliseconds = (0, general_1.now)();\n            const deltaMilliseconds = currentTimeMilliseconds - lastTimeMilliseconds;\n            if (deltaMilliseconds > this.targetFramePeriodMilliseconds) {\n                const overshoot = Math.min(deltaMilliseconds - this.targetFramePeriodMilliseconds, this.targetFramePeriodMilliseconds); // set max overshoot to frame period so overshoot does not elapse\n                this.callback(deltaMilliseconds);\n                lastTimeMilliseconds = currentTimeMilliseconds - overshoot;\n                const timeSinceLastSlept = (0, general_1.now)() - lastSleepTime;\n                const framePeriod = 1000 / storage_1.storage.framesPerSecondState.get();\n                if (timeSinceLastSlept > framePeriod) {\n                    await (0, general_1.sleep)(0);\n                    lastSleepTime = (0, general_1.now)();\n                }\n            }\n            else {\n                const remainingTimeMilliseconds = this.targetFramePeriodMilliseconds - deltaMilliseconds;\n                await (0, general_1.sleep)(Math.max(remainingTimeMilliseconds - 5, 0));\n                lastSleepTime = (0, general_1.now)();\n            }\n        }\n        this.isRunning = false;\n    }\n}\nexports.ProcessLoop = ProcessLoop;\nconst updateCanvasBlocks = (blocks, canvas) => {\n    const gridImages = blocks.mapToDict2D((block, v) => {\n        return block.getTextureName(v, blocks);\n    });\n    canvas.setGridImages(gridImages);\n};\nexports.updateCanvasBlocks = updateCanvasBlocks;\nconst vecToStr = (v) => `${v.x} ${v.y}`;\nconst strToVec = (v) => {\n    let [x, y] = v.split(' ');\n    return { x: Number(x), y: Number(y) };\n};\nconst getBlocksInQueue = (blocks, updateQueue) => {\n    const newBlocks = [];\n    for (const vs of updateQueue) {\n        const v = strToVec(vs);\n        const block = blocks.getValue(v);\n        newBlocks.push({ v, block });\n    }\n    return newBlocks;\n};\nconst addToUpdateQueue = (queue, v) => {\n    queue.add(vecToStr(v));\n    queue.add(vecToStr({ x: v.x + 1, y: v.y }));\n    queue.add(vecToStr({ x: v.x - 1, y: v.y }));\n    queue.add(vecToStr({ x: v.x, y: v.y + 1 }));\n    queue.add(vecToStr({ x: v.x, y: v.y - 1 }));\n};\nconst subUpdateBlocksWithQueue = (blocks, updateQueue) => {\n    const newUpdateQueue = new Set();\n    const innerFunction = (block, v) => {\n        // console.log('subUpdate', block, v)\n        const newBlock = block.subupdate(v, blocks);\n        if (!(0, general_1.areObjectsEqual)(block, newBlock)) {\n            // console.log('adding to queue', v)\n            addToUpdateQueue(newUpdateQueue, v);\n        }\n        return newBlock;\n    };\n    const newBlocks = [];\n    for (const vs of updateQueue) {\n        const v = strToVec(vs);\n        const oldblock = blocks.getValue(v);\n        const block = innerFunction(oldblock, v);\n        newBlocks.push({ v, block });\n    }\n    for (const { v, block } of newBlocks) {\n        blocks.setValue(v, block);\n    }\n    return newUpdateQueue;\n};\nexports.subUpdateBlocksWithQueue = subUpdateBlocksWithQueue;\nconst updateBlocksWithQueue = (blocks, updateQueue) => {\n    const newUpdateQueue = new Set();\n    const clearFallingSand = commands_1.clearFallingBlocksRequested.get();\n    const innerFunction = (block, v) => {\n        let newBlock = block.update(v, blocks);\n        if (clearFallingSand &&\n            (0, block_1.isBlock)(newBlock, block_1.BlockType.ConcretePowder) &&\n            newBlock.gravityMotion === concrete_powder_1.GravityMotion.Falling) {\n            newBlock = new air_1.Air({});\n        }\n        if (!(0, general_1.areObjectsEqual)(block, newBlock)) {\n            addToUpdateQueue(newUpdateQueue, v);\n        }\n        return newBlock;\n    };\n    const newBlocks = [];\n    for (const vs of updateQueue) {\n        const v = strToVec(vs);\n        const oldblock = blocks.getValue(v);\n        const block = innerFunction(oldblock, v);\n        newBlocks.push({ v, block });\n    }\n    if (commands_1.clearFallingBlocksRequested.get()) {\n        commands_1.clearFallingBlocksRequested.set(false);\n    }\n    for (const { v, block } of newBlocks) {\n        blocks.setValue(v, block);\n    }\n    return newUpdateQueue;\n};\nexports.updateBlocksWithQueue = updateBlocksWithQueue;\nconst appendSet = (set1, set2) => {\n    for (const element of set2) {\n        set1.add(element);\n    }\n};\nconst filterQueueToThoseWithoutNeighbours = (queue) => {\n    const positions = [];\n    for (const vs of queue) {\n        const v = strToVec(vs);\n        const hasAllNeighbours = (0, direction_1.getAllDirections)().every(direction => {\n            const offset = (0, direction_1.directionToVec2)(direction);\n            return queue.has(vecToStr((0, vec2_1.vec2Add)(v, offset)));\n        });\n        if (hasAllNeighbours) {\n            positions.push(v);\n        }\n    }\n    return positions;\n};\nconst createLogicLoop = (blocks, canvas) => {\n    let subtick = 0;\n    let tick = 0;\n    let elapsedTicksInSecond = 0;\n    let elapsedSubticksInSecond = 0;\n    let elapsedUpdatesInSecond = 0;\n    const queues = {\n        tick: new Set(),\n        subtick: new Set()\n    };\n    const fillUpdateQueue = () => {\n        ;\n        (queues.tick = new Set()), (queues.subtick = new Set());\n        for (const v of blocks.getPositions()) {\n            queues.tick.add(vecToStr(v));\n            queues.subtick.add(vecToStr(v));\n        }\n    };\n    fillUpdateQueue();\n    console.log('queue', queues);\n    setInterval(() => {\n        storage_1.storage.actualTicksPerSecondState.set(elapsedTicksInSecond);\n        storage_1.storage.actualSubticksPerSecondState.set(elapsedSubticksInSecond);\n        storage_1.storage.actualUpdatesPerSecondState.set(elapsedUpdatesInSecond);\n        elapsedTicksInSecond = 0;\n        elapsedSubticksInSecond = 0;\n        elapsedUpdatesInSecond = 0;\n    }, 1000);\n    const areSubticksExcessive = () => {\n        if (subtick > 99) {\n            const neighbouredPositions = filterQueueToThoseWithoutNeighbours(queues.subtick);\n            console.warn(`High number of subticks (${subtick}). Likely a bug! Queue length (${neighbouredPositions.length})`);\n            console.groupCollapsed('Subtick queue at max subticks:');\n            neighbouredPositions.forEach(v => console.log(v, { ...blocks.getValue(v) }));\n            console.groupEnd();\n            if (subtick > 100) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // queue items from a tick need to go to next tick and subtick\n    // queue items from a subtick become the next subtick queue AND need to be appended to tick quue\n    const processLogic = () => {\n        let combinedUpdateQueue;\n        // console.log(queues)\n        if (storage_1.storage.viewSubTicksState.get()) {\n            // process one subtick or one tick before updating canvas blocks\n            if (queues.subtick.size > 0 && !areSubticksExcessive()) {\n                // while there are subticks process them\n                elapsedUpdatesInSecond += queues.subtick.size;\n                combinedUpdateQueue = queues.subtick;\n                queues.subtick = (0, exports.subUpdateBlocksWithQueue)(blocks, queues.subtick);\n                appendSet(queues.tick, queues.subtick);\n                subtick += 1;\n                elapsedSubticksInSecond += 1;\n                storage_1.storage.subtickState.set(subtick);\n            }\n            else {\n                // TODO: combinedUpdateQueue can just be made from tick queue as tick queue\n                // already has subtick queue appended\n                combinedUpdateQueue = new Set([...queues.subtick, ...queues.tick]);\n                elapsedUpdatesInSecond += combinedUpdateQueue.size;\n                queues.subtick = (0, exports.updateBlocksWithQueue)(blocks, combinedUpdateQueue);\n                queues.tick = new Set([...queues.subtick]);\n                elapsedTicksInSecond += 1;\n                tick += 1;\n                storage_1.storage.tickState.set(tick);\n                subtick = 0;\n            }\n        }\n        else {\n            // process all subticks without updating canvas\n            elapsedUpdatesInSecond += queues.subtick.size;\n            queues.subtick = (0, exports.subUpdateBlocksWithQueue)(blocks, queues.subtick);\n            appendSet(queues.tick, queues.subtick);\n            elapsedUpdatesInSecond += queues.subtick.size;\n            subtick += 1;\n            elapsedSubticksInSecond += 1;\n            while (queues.subtick.size > 0) {\n                elapsedUpdatesInSecond += queues.subtick.size;\n                queues.subtick = (0, exports.subUpdateBlocksWithQueue)(blocks, queues.subtick);\n                appendSet(queues.tick, queues.subtick);\n                subtick += 1;\n                elapsedSubticksInSecond += 1;\n                if (areSubticksExcessive()) {\n                    break;\n                }\n            }\n            storage_1.storage.subtickState.set(subtick);\n            storage_1.storage.tickState.set(tick);\n            combinedUpdateQueue = new Set([...queues.subtick, ...queues.tick]);\n            elapsedUpdatesInSecond += combinedUpdateQueue.size;\n            queues.subtick = (0, exports.updateBlocksWithQueue)(blocks, combinedUpdateQueue);\n            queues.tick = new Set([...queues.subtick]);\n            subtick = 0;\n            tick += 1;\n            elapsedTicksInSecond += 1;\n        }\n        // console.log(combinedUpdateQueue.size)\n        // const updateCanvasBlocks2 = () => {\n        //   for (const vs of combinedUpdateQueue) {\n        //     const v: Vec2 = strToVec(vs)\n        //     const block: Block = blocks.getValue(v)\n        //     if (block.type !== BlockType.Air) {\n        //       canvas.imageGrid.setValue(v, block.getTextureName(v, blocks))\n        //     }\n        //     // console.log(v, block)\n        //   }\n        // }\n        // updateCanvasBlocks2()\n        (0, exports.updateCanvasBlocks)(blocks, canvas);\n    };\n    return {\n        processLogic,\n        addToTickQueue: (v) => {\n            addToUpdateQueue(queues.tick, v);\n            addToUpdateQueue(queues.subtick, v);\n        },\n        fillUpdateQueue\n    };\n};\nexports.createLogicLoop = createLogicLoop;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/game_loop.ts?");

/***/ }),

/***/ "./src/core/guide.ts":
/*!***************************!*\
  !*** ./src/core/guide.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.showGuide = exports.initialiseGuide = void 0;\nconst build_time_1 = __webpack_require__(/*! ../utils/build_time */ \"./src/utils/build_time.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst guidePanel = document.getElementById('guide-panel');\nconst guideButton = document.getElementById('guide-button');\nconst buildDetails = document.getElementById('build-details');\nconst initialiseGuide = () => {\n    const buildTime = (0, general_1.formatDate)(build_time_1.BUILD_TIME);\n    buildDetails.textContent = `${buildTime}`;\n    guideButton.onclick = () => {\n        guidePanel.classList.toggle('hide');\n    };\n};\nexports.initialiseGuide = initialiseGuide;\nconst showGuide = () => {\n    guidePanel.classList.remove('hide');\n};\nexports.showGuide = showGuide;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/guide.ts?");

/***/ }),

/***/ "./src/core/inventory.ts":
/*!*******************************!*\
  !*** ./src/core/inventory.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initialiseInventory = exports.setInventorySlot = exports.getInventorySlot = exports.toggleInventoryVisibility = void 0;\nconst tilemap_1 = __webpack_require__(/*! ../images/tilemap */ \"./src/images/tilemap.ts\");\nconst block_variants_1 = __webpack_require__(/*! ../utils/block_variants */ \"./src/utils/block_variants.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst save_1 = __webpack_require__(/*! ../utils/save */ \"./src/utils/save.ts\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./src/core/block.ts\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/core/storage.ts\");\nconst world_loading_1 = __webpack_require__(/*! ./world_loading */ \"./src/core/world_loading.ts\");\nconst blockSelectionPanel = document.getElementById('block-selection-panel');\nconst blockSelectionWrapper = document.getElementById('block-selection-wrapper');\nconst canvasElement = document.getElementById('canvas');\nconst inventoryPanel = document.getElementById('inventory-panel');\nconst inventoryWrapper = document.getElementById('inventory-wrapper');\nlet selectedInventorySlot = 0;\nconst inventoryState = {\n    createBlockItem: null\n};\nconst drawImage = (ctx, images, imageName, imageSize) => {\n    const tileInfo = tilemap_1.tilemap[imageName];\n    if (!tileInfo) {\n        console.warn(`ImageName: ${imageName} missing from tilemap`);\n        return;\n    }\n    const image = images.get('combinedImage');\n    ctx.drawImage(image, tileInfo.x, tileInfo.y, tileInfo.w, tileInfo.h, 0, 0, imageSize, imageSize);\n};\nconst drawLayer = (ctx, images, layer, imageSize) => {\n    if (layer.minSize)\n        return; // do not render details\n    ctx.globalCompositeOperation = layer.blendMode ?? 'source-over';\n    ctx.globalAlpha = layer.alpha ?? 1.0;\n    drawImage(ctx, images, layer.textureName, imageSize);\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.globalAlpha = 1.0;\n    // do not bother with drawing masks\n};\nconst createCopyBlock = (block) => {\n    const copyBlock = block.copy ? block.copy() : { type: block.type };\n    return copyBlock;\n};\nconst createBlockItemRaw = (images, blockState, world, imageSize, containerDiv) => {\n    const block = (0, create_block_1.createBlock)(blockState.type, blockState);\n    const canvasItem = block.getTextureName({ x: 8, y: 8 }, world);\n    let canvas;\n    let tooltipDiv;\n    if (!containerDiv) {\n        containerDiv = document.createElement('div');\n        containerDiv.className = 'block-container tooltip';\n        canvas = document.createElement('canvas');\n        canvas.width = imageSize;\n        canvas.height = imageSize;\n        tooltipDiv = document.createElement('div');\n        tooltipDiv.className = 'tooltiptext';\n        containerDiv.appendChild(tooltipDiv);\n        containerDiv.appendChild(canvas);\n    }\n    else {\n        canvas = containerDiv.getElementsByTagName('canvas')[0];\n        tooltipDiv = containerDiv.getElementsByClassName('tooltiptext')[0];\n    }\n    const ctx = canvas.getContext('2d');\n    ctx.imageSmoothingEnabled = false;\n    ctx.clearRect(0, 0, imageSize, imageSize);\n    if (typeof canvasItem === 'string') {\n        drawImage(ctx, images, canvasItem, imageSize);\n    }\n    else {\n        for (const layer of canvasItem.layers) {\n            drawLayer(ctx, images, layer, imageSize);\n        }\n    }\n    tooltipDiv.textContent = createToolTipText(block);\n    // convertObjectToString(\n    //   (blockState as unknown) as Record<string, string>\n    // )\n    return containerDiv;\n};\nconst selectInventorySlot = () => {\n    Array.from(inventoryPanel.getElementsByClassName('selected')).forEach(element => element.classList.remove('selected'));\n    const inventoryItem = inventoryPanel.children[selectedInventorySlot];\n    inventoryItem.classList.add('selected');\n};\nconst toggleInventoryVisibility = () => {\n    blockSelectionWrapper.classList.toggle('hide');\n};\nexports.toggleInventoryVisibility = toggleInventoryVisibility;\nconst scrollInventorySlots = (event) => {\n    if (event.ctrlKey)\n        return;\n    selectedInventorySlot += Math.sign(event.deltaY);\n    selectedInventorySlot = Math.max(Math.min(8, selectedInventorySlot), 0);\n    const inventoryItem = inventoryPanel.children[selectedInventorySlot];\n    inventoryItem.click();\n};\nconst initialiseCreateBlockItem = (images, world, imageSize) => {\n    return (blockState, inventoryItem) => createBlockItemRaw(images, blockState, world, imageSize, inventoryItem);\n};\nconst setInventorySlotSave = (blockState, slotIndex) => {\n    const inventorySlots = storage_1.storage.inventorySlots.get();\n    inventorySlots[slotIndex] = blockState;\n    storage_1.storage.inventorySlots.set(inventorySlots);\n};\nconst addInventorySlotOnClick = (blockComponent, blockState, slotIndex) => {\n    blockComponent.onclick = () => {\n        storage_1.storage.selectedBlockState.set(blockState);\n        setInventorySlotSave(blockState, slotIndex);\n        selectedInventorySlot = slotIndex;\n        selectInventorySlot();\n        const inventoryItem = inventoryPanel.children[slotIndex];\n        inventoryState.createBlockItem(blockState, inventoryItem);\n    };\n};\nconst getInventorySlot = (slotIndex) => {\n    const inventoryItem = inventoryPanel.children[slotIndex];\n    return inventoryItem;\n};\nexports.getInventorySlot = getInventorySlot;\nconst setInventorySlot = (block) => {\n    const blockState = createCopyBlock(block);\n    if (gotoExistingSlotItem(blockState))\n        return;\n    const blockElement = (0, exports.getInventorySlot)(selectedInventorySlot);\n    setInventorySlotOnClick(blockState, blockElement);\n    blockElement.click();\n};\nexports.setInventorySlot = setInventorySlot;\nconst createToolTipText = (block) => {\n    return (0, general_1.snakeCaseToWords)((0, block_1.getBlockName)(block));\n};\nconst gotoExistingSlotItem = (blockState) => {\n    const currentTooltipText = createToolTipText((0, create_block_1.createBlock)(blockState.type, blockState));\n    const existingInventorySlotIndex = Array.from(inventoryPanel.children).findIndex(containerDiv => {\n        const tooltipDiv = containerDiv.getElementsByClassName('tooltiptext')[0];\n        return tooltipDiv.textContent === currentTooltipText;\n    });\n    // console.log({ block, existingInventorySlotIndex })\n    if (existingInventorySlotIndex >= 0) {\n        selectedInventorySlot = existingInventorySlotIndex;\n        storage_1.storage.selectedBlockState.set(blockState);\n        selectInventorySlot();\n        return true;\n    }\n    return false;\n};\nconst setInventorySlotOnClick = (blockState, blockElement) => {\n    blockElement.onclick = () => {\n        storage_1.storage.selectedBlockState.set(blockState);\n        setInventorySlotSave(blockState, selectedInventorySlot);\n        const inventoryItem = inventoryPanel.children[selectedInventorySlot];\n        selectInventorySlot();\n        const newInventoryItem = inventoryState.createBlockItem(blockState, inventoryItem);\n        addInventorySlotOnClick(newInventoryItem, blockState, selectedInventorySlot);\n    };\n};\nconst initialiseInventory = (images) => {\n    const emptyWorld = (0, world_loading_1.createEmptyBlockContainer)();\n    const blocks = (0, block_variants_1.getAllBlockVariants)();\n    storage_1.storage.inventorySlots = new save_1.LocalStorageVariable({\n        defaultValue: blocks.slice(0, 9).map(createCopyBlock),\n        localStorageKey: 'inventory-slots',\n        saveInterval: 0\n    });\n    inventoryState.createBlockItem = initialiseCreateBlockItem(images, emptyWorld, 48);\n    blocks.forEach(block => {\n        const blockState = createCopyBlock(block);\n        const blockComponent = inventoryState.createBlockItem(blockState);\n        setInventorySlotOnClick(blockState, blockComponent);\n        blockSelectionPanel.appendChild(blockComponent);\n    });\n    storage_1.storage.inventorySlots\n        .get()\n        .forEach((blockState, slotIndex) => {\n        const blockComponent = inventoryState.createBlockItem(blockState);\n        addInventorySlotOnClick(blockComponent, blockState, slotIndex);\n        inventoryPanel.appendChild(blockComponent);\n    });\n    // goto saved selected item otherwise goto slot 0\n    if (!gotoExistingSlotItem(storage_1.storage.selectedBlockState.get())) {\n        const inventoryItem = (0, exports.getInventorySlot)(selectedInventorySlot);\n        inventoryItem.classList.add('selected');\n    }\n    canvasElement.addEventListener('wheel', scrollInventorySlots);\n    inventoryPanel.addEventListener('wheel', scrollInventorySlots);\n};\nexports.initialiseInventory = initialiseInventory;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/inventory.ts?");

/***/ }),

/***/ "./src/core/moveable_block.ts":
/*!************************************!*\
  !*** ./src/core/moveable_block.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.observerFilteredMovement = exports.getMovementTextureName = exports.updateSubMovement = exports.updateMovement = exports.MovementUpdateType = void 0;\nconst air_1 = __webpack_require__(/*! ../blocks/air */ \"./src/blocks/air.ts\");\nconst piston_head_1 = __webpack_require__(/*! ../blocks/piston_head */ \"./src/blocks/piston_head.ts\");\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ./direction */ \"./src/core/direction.ts\");\nvar MovementUpdateType;\n(function (MovementUpdateType) {\n    MovementUpdateType[\"StateChange\"] = \"StateChange\";\n    MovementUpdateType[\"BlockChange\"] = \"BlockChange\";\n})(MovementUpdateType || (exports.MovementUpdateType = MovementUpdateType = {}));\nconst createStateChange = (state) => {\n    return { type: MovementUpdateType.StateChange, state };\n};\nconst createBlockChange = (block) => {\n    return { type: MovementUpdateType.BlockChange, block };\n};\nconst updateMovement = (_position, _blocks, _movement, movementDirection) => {\n    return createStateChange({\n        movement: block_1.Movement.None,\n        movementDirection\n    });\n};\nexports.updateMovement = updateMovement;\nconst updateSubMovement = (position, blocks, movement, movementDirection) => {\n    if (movement === block_1.Movement.None) {\n        for (const direction of (0, direction_1.getAllDirections)()) {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            const oppositeDirection = (0, block_fetching_1.getOppositeRelativeDirection)(position, blocks, direction);\n            if ((0, block_1.isBlock)(neighbour, block_1.BlockType.Piston) &&\n                neighbour.direction === oppositeDirection &&\n                neighbour.isBeingPowered) {\n                return createStateChange({\n                    movement: block_1.Movement.Pending,\n                    movementDirection: oppositeDirection\n                });\n            }\n            else if ((0, block_1.isMoveableBlock)(neighbour) &&\n                neighbour.getMovementMethod() === block_1.BlockMovement.Moveable &&\n                neighbour.movement === block_1.Movement.Pending &&\n                neighbour.movementDirection === oppositeDirection) {\n                return createStateChange({\n                    movement: block_1.Movement.Pending,\n                    movementDirection: oppositeDirection\n                });\n            }\n            else if ((0, block_1.isBlock)(neighbour, block_1.BlockType.PistonHead) &&\n                neighbour.motion === piston_head_1.PistonHeadMotion.Retracting &&\n                neighbour.direction === oppositeDirection) {\n                // [piston head retracting] [block] [pending block]\n                if (neighbour.isSticky) {\n                    return createStateChange({\n                        movement: block_1.Movement.RetractionPending,\n                        movementDirection: oppositeDirection\n                    });\n                }\n                else {\n                    return createStateChange({\n                        movement: block_1.Movement.None,\n                        movementDirection\n                    });\n                }\n            }\n        }\n    }\n    else if (movement === block_1.Movement.Pending) {\n        const frontNeighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, movementDirection, true // movementDirection is an absolute direction\n        );\n        const backNeighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, (0, direction_1.getOppositeDirection)(movementDirection), true // movementDirection is an absolute direction\n        );\n        if ((0, block_1.isMoveableBlock)(frontNeighbour) &&\n            frontNeighbour.getMovementMethod() === block_1.BlockMovement.Moveable &&\n            frontNeighbour.movement === block_1.Movement.Complete &&\n            frontNeighbour.movementDirection === movementDirection) {\n            if ((0, block_1.isBlock)(backNeighbour, block_1.BlockType.Piston) &&\n                backNeighbour.direction === movementDirection &&\n                backNeighbour.movement === block_1.Movement.None) {\n                return createBlockChange(new piston_head_1.PistonHead({\n                    direction: movementDirection,\n                    motion: piston_head_1.PistonHeadMotion.Extending,\n                    isSticky: backNeighbour.isSticky\n                }));\n            }\n            else {\n                return createBlockChange((0, create_block_1.createBlock)(backNeighbour.type, {\n                    ...backNeighbour,\n                    movement: block_1.Movement.Complete,\n                    movementDirection\n                }));\n                // return createStateChange({\n                //   movement: Movement.Complete,\n                //   movementDirection\n                // })\n            }\n        }\n        else {\n            return createStateChange({\n                movement: block_1.Movement.Pending,\n                movementDirection\n            });\n        }\n    }\n    else if (movement === block_1.Movement.RetractionPending) {\n        return createBlockChange(new air_1.Air());\n    }\n    else if (movement === block_1.Movement.Complete) {\n        return createStateChange({\n            movement: block_1.Movement.Complete,\n            movementDirection\n        });\n    }\n    else if (movement === block_1.Movement.RetractionComplete) {\n        return createStateChange({\n            movement: block_1.Movement.RetractionComplete,\n            movementDirection\n        });\n    }\n    return createStateChange({\n        movement: block_1.Movement.None,\n        movementDirection\n    });\n};\nexports.updateSubMovement = updateSubMovement;\nconst getMovementTextureName = (block) => {\n    const movementTex = {\n        [block_1.Movement.None]: '',\n        [block_1.Movement.Pending]: 'extension_pending',\n        [block_1.Movement.Complete]: 'extension_complete',\n        [block_1.Movement.RetractionPending]: 'retraction_pending',\n        [block_1.Movement.RetractionComplete]: 'retraction_complete'\n    }[block.movement];\n    const directionTex = block.movement === block_1.Movement.None\n        ? ''\n        : `_${block.movementDirection.toLowerCase()}`;\n    return {\n        textureName: `${movementTex}${directionTex}`,\n        blendMode: 'luminosity',\n        alpha: 0.7\n    };\n};\nexports.getMovementTextureName = getMovementTextureName;\nconst observerFilteredMovement = (movement) => {\n    switch (movement) {\n        case block_1.Movement.Complete:\n            return block_1.Movement.Complete;\n        case block_1.Movement.RetractionComplete:\n            return block_1.Movement.RetractionComplete;\n        default:\n            // do not want to detect pending/failed movement\n            return block_1.Movement.None;\n    }\n};\nexports.observerFilteredMovement = observerFilteredMovement;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/moveable_block.ts?");

/***/ }),

/***/ "./src/core/powerable_block.ts":
/*!*************************************!*\
  !*** ./src/core/powerable_block.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getInputSignalStrength = exports.OutputSignalStrengthBlock = exports.IsPoweredBlock = exports.OutputPowerBlock = exports.PowerHardness = exports.BinaryPower = void 0;\nconst block_fetching_1 = __webpack_require__(/*! ../utils/block_fetching */ \"./src/utils/block_fetching.ts\");\nconst direction_1 = __webpack_require__(/*! ./direction */ \"./src/core/direction.ts\");\nvar BinaryPower;\n(function (BinaryPower) {\n    BinaryPower[\"None\"] = \"None\";\n    BinaryPower[\"Strong\"] = \"Strong\";\n    BinaryPower[\"Weak\"] = \"Weak\";\n})(BinaryPower || (exports.BinaryPower = BinaryPower = {}));\nvar PowerHardness;\n(function (PowerHardness) {\n    PowerHardness[\"Hard\"] = \"hard\";\n    PowerHardness[\"Soft\"] = \"soft\";\n})(PowerHardness || (exports.PowerHardness = PowerHardness = {}));\nvar OutputPowerBlock;\n(function (OutputPowerBlock) {\n    function isBlock(block) {\n        return 'getOutputPower' in block;\n    }\n    OutputPowerBlock.isBlock = isBlock;\n    OutputPowerBlock.update = (state, position, blocks) => {\n        let outputPower = BinaryPower.None;\n        for (const direction of (0, direction_1.getAllDirections)()) {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            let inputPower = BinaryPower.None;\n            if (OutputPowerBlock.isBlock(neighbour)) {\n                const oppositeDirection = (0, direction_1.getOppositeDirection)(direction);\n                if (neighbour.getPowerHardness &&\n                    neighbour.getPowerHardness(oppositeDirection) === PowerHardness.Hard) {\n                    inputPower = neighbour.getOutputPower(oppositeDirection);\n                }\n            }\n            if (inputPower === BinaryPower.Strong) {\n                outputPower = BinaryPower.Strong;\n                break;\n            }\n            else if (outputPower === BinaryPower.None &&\n                inputPower === BinaryPower.Weak) {\n                outputPower = BinaryPower.Weak;\n            }\n        }\n        return { outputPower };\n    };\n    OutputPowerBlock.isOutputtingPower = (block, direction) => {\n        const isBeingPowered = OutputPowerBlock.isBlock(block) &&\n            block.getOutputPower(direction) !== BinaryPower.None;\n        return isBeingPowered;\n    };\n})(OutputPowerBlock || (exports.OutputPowerBlock = OutputPowerBlock = {}));\nvar IsPoweredBlock;\n(function (IsPoweredBlock) {\n    function isBlock(block) {\n        return 'isPowered' in block;\n    }\n    IsPoweredBlock.isBlock = isBlock;\n    IsPoweredBlock.update = (_state, position, blocks) => {\n        let isPowered = false;\n        for (const direction of (0, direction_1.getAllDirections)()) {\n            const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n            const isBeingPowered = OutputPowerBlock.isBlock(neighbour) &&\n                neighbour.getOutputPower((0, direction_1.getOppositeDirection)(direction)) !==\n                    BinaryPower.None;\n            if (isBeingPowered) {\n                isPowered = true;\n                break;\n            }\n        }\n        return { isPowered };\n    };\n})(IsPoweredBlock || (exports.IsPoweredBlock = IsPoweredBlock = {}));\nvar OutputSignalStrengthBlock;\n(function (OutputSignalStrengthBlock) {\n    function isBlock(block) {\n        return 'getOutputPowerStrength' in block;\n    }\n    OutputSignalStrengthBlock.isBlock = isBlock;\n})(OutputSignalStrengthBlock || (exports.OutputSignalStrengthBlock = OutputSignalStrengthBlock = {}));\nconst getInputSignalStrength = (position, blocks) => {\n    let signalStrength = 0;\n    for (const direction of (0, direction_1.getAllDirections)()) {\n        const neighbour = (0, block_fetching_1.getNeighbourBlock)(position, blocks, direction);\n        if (OutputPowerBlock.isBlock(neighbour)) {\n            const oppositeDirection = (0, direction_1.getOppositeDirection)(direction);\n            // TODO: assuming this is for blocks, they do not output soft power\n            // so this should really be getOutputSignalStrengthOfSolidBlock\n            if (neighbour.getPowerHardness(direction) === PowerHardness.Hard) {\n                const outputPower = neighbour.getOutputPower(oppositeDirection);\n                if ([BinaryPower.Strong, BinaryPower.Weak].includes(outputPower)) {\n                    if (OutputSignalStrengthBlock.isBlock(neighbour)) {\n                        const powerStrength = neighbour.getOutputPowerStrength((0, direction_1.getOppositeDirection)(direction));\n                        if (powerStrength == 15) {\n                            return 15;\n                        }\n                        else if (powerStrength > signalStrength) {\n                            signalStrength = powerStrength;\n                        }\n                    }\n                    else {\n                        return 15;\n                    }\n                }\n            }\n        }\n    }\n    return signalStrength;\n};\nexports.getInputSignalStrength = getInputSignalStrength;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/powerable_block.ts?");

/***/ }),

/***/ "./src/core/storage.ts":
/*!*****************************!*\
  !*** ./src/core/storage.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initialiseStorage = exports.storage = exports.clearStorageOnVersionIncrease = void 0;\nconst save_1 = __webpack_require__(/*! ../utils/save */ \"./src/utils/save.ts\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./src/core/block.ts\");\nconst world_loading_1 = __webpack_require__(/*! ./world_loading */ \"./src/core/world_loading.ts\");\nconst clearStorageOnVersionIncrease = () => {\n    const latestVersion = 9;\n    const savedVersion = Number(localStorage.getItem('version'));\n    const hasVersionIncreased = isNaN(savedVersion) || savedVersion !== latestVersion;\n    if (hasVersionIncreased) {\n        console.log('cleared local storage', { latestVersion, savedVersion });\n        localStorage.clear();\n    }\n    localStorage.setItem('version', JSON.stringify(latestVersion));\n    return hasVersionIncreased;\n};\nexports.clearStorageOnVersionIncrease = clearStorageOnVersionIncrease;\nexports.storage = {};\nconst initialiseStorage = () => {\n    exports.storage.framesPerSecondState = new save_1.LocalStorageVariable({\n        defaultValue: 60,\n        localStorageKey: 'frames-per-second',\n        saveInterval: 0\n    });\n    exports.storage.updatesPerSecondState = new save_1.LocalStorageVariable({\n        defaultValue: 5,\n        localStorageKey: 'updates-per-second',\n        saveInterval: 0\n    });\n    exports.storage.viewSubTicksState = new save_1.LocalStorageVariable({\n        defaultValue: false,\n        localStorageKey: 'view-subticks',\n        saveInterval: 0\n    });\n    exports.storage.viewSignalStrengthState = new save_1.LocalStorageVariable({\n        defaultValue: true,\n        localStorageKey: 'view-signal-strength',\n        saveInterval: 0\n    });\n    exports.storage.blockStorage = new save_1.LocalStorageVariable({\n        localStorageKey: 'world',\n        defaultValue: (0, world_loading_1.createEmptyWorld)(),\n        valueToStorage: (blocks) => {\n            const blocksForStorage = blocks.mapToDict2D((block, v) => {\n                return block;\n            });\n            // console.log('save', Object.fromEntries(blocksForStorage.items))\n            return (0, save_1.compressObject)(Object.fromEntries(blocksForStorage.items));\n        },\n        storageToValue: (storage) => {\n            const blocks = (0, world_loading_1.createEmptyBlockContainer)();\n            const chunks = (0, save_1.decompressObject)(storage);\n            (0, world_loading_1.loadChunks)(chunks, blocks);\n            return blocks;\n        }\n    });\n    exports.storage.selectedBlockStorage = new save_1.LocalStorageVariable({\n        localStorageKey: 'selected-blocks',\n        defaultValue: (0, world_loading_1.createEmptyWorld)(),\n        valueToStorage: (blocks) => {\n            const blocksForStorage = blocks.mapToDict2D((block, v) => {\n                return block;\n            });\n            // console.log('save', Object.fromEntries(blocksForStorage.items))\n            return (0, save_1.compressObject)(Object.fromEntries(blocksForStorage.items));\n        },\n        storageToValue: (storage) => {\n            const blocks = (0, world_loading_1.createEmptyBlockContainer)();\n            const chunks = (0, save_1.decompressObject)(storage);\n            (0, world_loading_1.loadChunks)(chunks, blocks);\n            return blocks;\n        }\n    });\n    exports.storage.tickState = new save_1.LocalStorageVariable({\n        defaultValue: 0,\n        saveInterval: 0\n    });\n    exports.storage.subtickState = new save_1.LocalStorageVariable({\n        defaultValue: 0,\n        saveInterval: 0\n    });\n    exports.storage.selectedBlockState = new save_1.LocalStorageVariable({\n        defaultValue: { type: block_1.BlockType.Air },\n        localStorageKey: 'selected-block',\n        saveInterval: 0\n    });\n    exports.storage.actualTicksPerSecondState = new save_1.LocalStorageVariable({\n        defaultValue: 0\n    });\n    exports.storage.actualSubticksPerSecondState = new save_1.LocalStorageVariable({\n        defaultValue: 0\n    });\n    exports.storage.actualFramesPerSecondState = new save_1.LocalStorageVariable({\n        defaultValue: 0\n    });\n    exports.storage.actualUpdatesPerSecondState = new save_1.LocalStorageVariable({\n        defaultValue: 0\n    });\n};\nexports.initialiseStorage = initialiseStorage;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/storage.ts?");

/***/ }),

/***/ "./src/core/user_input.ts":
/*!********************************!*\
  !*** ./src/core/user_input.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initBlockEventListeners = exports.isBodyCurrentlyFocused = exports.initCanvasResizeListener = void 0;\nconst air_1 = __webpack_require__(/*! ../blocks/air */ \"./src/blocks/air.ts\");\nconst vec2_1 = __webpack_require__(/*! ../containers/vec2 */ \"./src/containers/vec2.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ./direction */ \"./src/core/direction.ts\");\nconst game_loop_1 = __webpack_require__(/*! ./game_loop */ \"./src/core/game_loop.ts\");\nconst inventory_1 = __webpack_require__(/*! ./inventory */ \"./src/core/inventory.ts\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/core/storage.ts\");\nconst world_loading_1 = __webpack_require__(/*! ./world_loading */ \"./src/core/world_loading.ts\");\nconst canvasElement = document.getElementById('canvas');\nconst selectionElement = document.getElementById('selection');\nconst initCanvasResizeListener = () => {\n    const resizeCanvas = () => {\n        const context = canvasElement.getContext('2d');\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvasElement.width = canvasElement.clientWidth * pixelRatio;\n        canvasElement.height = canvasElement.clientHeight * pixelRatio;\n        context.imageSmoothingEnabled = false;\n    };\n    let resizeTimeout;\n    window.addEventListener('resize', () => {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = setTimeout(() => {\n            resizeCanvas();\n        }, 200);\n    });\n    resizeCanvas();\n};\nexports.initCanvasResizeListener = initCanvasResizeListener;\nconst isBodyCurrentlyFocused = () => {\n    return document.activeElement === document.body;\n};\nexports.isBodyCurrentlyFocused = isBodyCurrentlyFocused;\nconst initBlockSelection = (blocks, canvas) => {\n    let mouse = { x: 0, y: 0 };\n    let lastMouse = { x: 0, y: 0 };\n    let isPanning = false;\n    let hasMetMinimumMovementThreshold = false;\n    let movementThreshold = 8;\n    const checkMovementThreshold = (offset) => {\n        if (hasMetMinimumMovementThreshold)\n            return;\n        if (offset.x * offset.x + offset.y * offset.y >\n            movementThreshold * movementThreshold) {\n            lastMouse = mouse;\n            hasMetMinimumMovementThreshold = true;\n        }\n    };\n    const handleMouseMove = (event) => {\n        const pixelRatio = window.devicePixelRatio || 1;\n        mouse = {\n            x: event.offsetX * pixelRatio,\n            y: event.offsetY * pixelRatio\n        };\n        if (isPanning) {\n            const mouseOffset = (0, vec2_1.vec2Subtract)(mouse, lastMouse);\n            checkMovementThreshold(mouseOffset);\n        }\n        else {\n            hasMetMinimumMovementThreshold = false;\n            lastMouse = mouse;\n        }\n        if (hasMetMinimumMovementThreshold) {\n            // render selection element\n            selectionElement.classList.remove('hide');\n            const minMousePos = {\n                x: Math.min(lastMouse.x, mouse.x),\n                y: Math.min(lastMouse.y, mouse.y)\n            };\n            const maxMousePos = {\n                x: Math.max(lastMouse.x, mouse.x),\n                y: Math.max(lastMouse.y, mouse.y)\n            };\n            // console.log(minMousePos, maxMousePos)\n            selectionElement.style.top = `${minMousePos.y}px`;\n            selectionElement.style.height = `${maxMousePos.y - minMousePos.y}px`;\n            selectionElement.style.left = `${minMousePos.x}px`;\n            selectionElement.style.width = `${maxMousePos.x - minMousePos.x}px`;\n        }\n    };\n    const handleComplete = (event) => {\n        const deleteBlocks = event.shiftKey;\n        if (hasMetMinimumMovementThreshold) {\n            const startPos = (0, vec2_1.vec2Apply)(canvas.getMouseWorldPosition(lastMouse), Math.floor);\n            const endPos = (0, vec2_1.vec2Apply)(canvas.getMouseWorldPosition(mouse), Math.floor);\n            const copyWorld = (0, world_loading_1.createEmptyWorld)();\n            const minPos = {\n                x: Math.min(startPos.x, endPos.x),\n                y: Math.min(startPos.y, endPos.y)\n            };\n            const maxPos = {\n                x: Math.max(startPos.x, endPos.x),\n                y: Math.max(startPos.y, endPos.y)\n            };\n            for (let y = minPos.y; y < maxPos.y + 1; ++y) {\n                for (let x = minPos.x; x < maxPos.x + 1; ++x) {\n                    const v = { x, y };\n                    copyWorld.setValue((0, vec2_1.vec2Subtract)(v, minPos), blocks.getValue(v));\n                    if (deleteBlocks) {\n                        blocks.setValue(v, new air_1.Air());\n                    }\n                }\n            }\n            // console.log(startPos, endPos)\n            // console.log(copyWorld)\n            storage_1.storage.selectedBlockStorage.set(copyWorld);\n            // storage.selectedBlockStorage.set(copyWorld)\n            // downloadWorld(copyWorld, false)\n        }\n        isPanning = false;\n        hasMetMinimumMovementThreshold = false;\n        selectionElement.classList.add('hide');\n    };\n    canvas.canvas.addEventListener('pointermove', handleMouseMove);\n    canvas.canvas.addEventListener('pointerdown', (ev) => {\n        // do not allow block selection if ctrlKey is pressed\n        if (!ev.ctrlKey)\n            return;\n        isPanning = true;\n        lastMouse = mouse;\n    });\n    canvas.canvas.addEventListener('pointerup', handleComplete);\n    canvas.canvas.addEventListener('pointerleave', handleComplete);\n};\nconst stringifyBlock = (block, isNested = false) => {\n    return Object.entries(block)\n        .map(([key, value]) => {\n        if (typeof value === 'object' &&\n            !Array.isArray(value) &&\n            value !== null) {\n            // Handle nested objects recursively\n            return `${key}=[${stringifyBlock(value, true)}]`;\n        }\n        else if (Array.isArray(value)) {\n            // Surround arrays with angled brackets\n            return `${key}=[${value.join(',')}]`;\n        }\n        else {\n            return `${key}=${value}`;\n        }\n    })\n        .join(isNested ? ',' : '@');\n};\nconst parseBlockString = (input) => {\n    const result = {};\n    const texts = input.split('@');\n    for (const text of texts) {\n        const key = text.split('=')[0];\n        const valueRaw = text\n            .split('=')\n            .slice(1)\n            .join('=');\n        let value = valueRaw;\n        // console.log('parse ?', valueRaw)\n        if (valueRaw.startsWith('[') && value.endsWith(']')) {\n            if (valueRaw.includes('=')) {\n                // parse object\n                // console.log('parse object', valueRaw)\n                value = Object.fromEntries(valueRaw\n                    .substring(1, valueRaw.length - 1)\n                    .split(',')\n                    .map(item => {\n                    const [key, value] = item.trim().split('=');\n                    return [key, (0, general_1.interpretCastString)(value)];\n                }));\n            }\n            else {\n                // console.log('parse array', valueRaw)\n                // Parse array\n                value = valueRaw\n                    .substring(1, valueRaw.length - 1)\n                    .split(',')\n                    .map(item => (0, general_1.interpretCastString)(item.trim()));\n            }\n        }\n        else {\n            value = (0, general_1.interpretCastString)(valueRaw);\n        }\n        result[key] = value;\n    }\n    return result;\n};\nconst initBlockEventListeners = (canvas, blocks, addToTickQueue) => {\n    initBlockSelection(blocks, canvas);\n    const placeBlock = (event) => {\n        // console.log('place block')\n        const p = canvas.getMouseWorldPosition();\n        const pi = (0, vec2_1.vec2Apply)(p, Math.floor);\n        const getPlacementDirection = (v) => {\n            if (Math.abs(v.x - 0.5) > Math.abs(v.y - 0.5)) {\n                return v.x > 0.5 ? direction_1.Direction.Right : direction_1.Direction.Left;\n            }\n            else {\n                return v.y > 0.5 ? direction_1.Direction.Up : direction_1.Direction.Down;\n            }\n        };\n        const direction = getPlacementDirection((0, vec2_1.vec2Subtract)(p, pi));\n        const block = blocks.getValue(pi);\n        if (block.type === block_1.BlockType.Air) {\n            const copyState = storage_1.storage.selectedBlockState.get();\n            const newBlock = (0, create_block_1.createBlock)(copyState.type, {\n                direction,\n                ...copyState\n            });\n            blocks.setValue(pi, newBlock);\n            blocks.setValue(pi, newBlock.update(pi, blocks));\n            addToTickQueue(pi);\n            // updateCanvas()\n            (0, game_loop_1.updateCanvasBlocks)(blocks, canvas);\n        }\n        else {\n            // console.log('selected block', block.type)\n            if (!event.ctrlKey && block.interact) {\n                const newBlock = block.interact();\n                if (typeof newBlock === 'string') {\n                }\n                else {\n                    blocks.setValue(pi, newBlock);\n                    blocks.setValue(pi, newBlock.update(pi, blocks));\n                    addToTickQueue(pi);\n                }\n                // updateCanvas()\n            }\n            else {\n                // const copyState: BlockState = block.copy\n                //   ? block.copy()\n                //   : { type: block.type }\n                // storage.selectedBlockState.set(copyState)\n                (0, inventory_1.setInventorySlot)(block);\n            }\n            (0, game_loop_1.updateCanvasBlocks)(blocks, canvas);\n        }\n    };\n    const deleteBlock = () => {\n        // console.log('delete block')\n        const p = canvas.getMouseWorldPosition();\n        const pi = (0, vec2_1.vec2Apply)(p, Math.floor);\n        blocks.setValue(pi, new air_1.Air({}));\n        addToTickQueue(pi);\n        (0, game_loop_1.updateCanvasBlocks)(blocks, canvas);\n        // updateCanvas()\n    };\n    (0, general_1.addClickHandlerWithDragCheck)(canvasElement, placeBlock, 8);\n    const blockStateDebugElement = document.getElementById('block-state-debug');\n    let blockStateDebugInterval;\n    const handleBlockStateDebug = (event) => {\n        const pixelRatio = window.devicePixelRatio || 1;\n        const mouse = {\n            x: event.offsetX * pixelRatio,\n            y: event.offsetY * pixelRatio\n        };\n        const v = (0, vec2_1.vec2Apply)(canvas.getMouseWorldPosition(mouse), Math.floor);\n        clearInterval(blockStateDebugInterval);\n        const block = blocks.getValue(v);\n        if (block.type === block_1.BlockType.Air) {\n            // do not show tracking for an air block (used to turn debug off)\n            blockStateDebugElement.classList.add('hide');\n            return;\n        }\n        const updateBlockDebugState = () => {\n            const block = blocks.getValue(v);\n            const x = stringifyBlock(block);\n            if (x !== lastBlockText) {\n                // console.log(x, parseBlockString(x))\n                lastBlockText = x;\n                blockStateDebugElement.innerHTML = '';\n                x.split('@').map(text => {\n                    const key = text.split('=')[0];\n                    const value = text\n                        .split('=')\n                        .slice(1)\n                        .join('=');\n                    const item = document.createElement('div');\n                    item.className = 'item';\n                    const label = document.createElement('label');\n                    const input = document.createElement('span');\n                    input.className = 'input';\n                    input.contentEditable = 'true';\n                    const id = `block-field-${key}`;\n                    input.id = id;\n                    label.textContent = key + ':';\n                    label.htmlFor = id;\n                    input.innerHTML = value;\n                    const updateBlockState = () => {\n                        const newBlockState = { ...block };\n                        newBlockState[key] = (0, general_1.interpretCastString)(input.innerHTML);\n                        const newBlock = (0, create_block_1.createBlock)(block.type, newBlockState);\n                        // console.log(newBlock)\n                        blocks.setValue(v, newBlock);\n                        (0, game_loop_1.updateCanvasBlocks)(blocks, canvas);\n                    };\n                    document.addEventListener('keydown', event => {\n                        if (input !== document.activeElement) {\n                            return;\n                        }\n                        if (event.key === 'Enter' && !event.shiftKey) {\n                            updateBlockState();\n                            event.preventDefault();\n                        }\n                    });\n                    input.onblur = updateBlockState;\n                    item.appendChild(label);\n                    item.appendChild(input);\n                    blockStateDebugElement.appendChild(item);\n                });\n            }\n        };\n        let lastBlockText = '';\n        blockStateDebugInterval = setInterval(updateBlockDebugState, 100);\n        updateBlockDebugState();\n        blockStateDebugElement.classList.remove('hide');\n    };\n    document.addEventListener('keydown', event => {\n        if (!(0, exports.isBodyCurrentlyFocused)()) {\n            return;\n        }\n        if (event.key === 'e') {\n            const p = canvas.getMouseWorldPosition();\n            const pi = (0, vec2_1.vec2Apply)(p, Math.floor);\n            console.log(blocks.getValue(pi));\n        }\n        else if (event.key === 'a') {\n            (0, inventory_1.toggleInventoryVisibility)();\n        }\n    });\n    canvasElement.addEventListener('contextmenu', function (event) {\n        // right click\n        event.preventDefault(); // Prevent the default context menu from appearing\n        if (event.ctrlKey) {\n            deleteBlock();\n        }\n        else {\n            handleBlockStateDebug(event);\n        }\n    });\n};\nexports.initBlockEventListeners = initBlockEventListeners;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/user_input.ts?");

/***/ }),

/***/ "./src/core/world_loading.ts":
/*!***********************************!*\
  !*** ./src/core/world_loading.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.downloadWorld = exports.createEmptyWorld = exports.createDemoWorld = exports.createEmptyBlockContainer = exports.loadChunks = exports.loadWorldSave = void 0;\nconst air_1 = __webpack_require__(/*! ../blocks/air */ \"./src/blocks/air.ts\");\nconst array2d_1 = __webpack_require__(/*! ../containers/array2d */ \"./src/containers/array2d.ts\");\nconst create_block_1 = __webpack_require__(/*! ../utils/create_block */ \"./src/utils/create_block.ts\");\nconst general_1 = __webpack_require__(/*! ../utils/general */ \"./src/utils/general.ts\");\nconst save_1 = __webpack_require__(/*! ../utils/save */ \"./src/utils/save.ts\");\nconst block_1 = __webpack_require__(/*! ./block */ \"./src/core/block.ts\");\nconst loadWorldSave = async () => {\n    try {\n        const response = await fetch('saves/world1.json');\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const jsonData = await response.json();\n        // console.log('JSON data:', jsonData)\n        return jsonData;\n    }\n    catch (error) {\n        console.error('Error fetching JSON:', error);\n    }\n};\nexports.loadWorldSave = loadWorldSave;\n// export const listSelectableBlocks = (): Block[] => {\n//   const blocks: Block[] = [\n//     new RedstoneBlock({}),\n//     new RedstoneTorch({}),\n//     new GlassBlock({}),\n//     new RedstoneLamp({}),\n//     new Piston({}),\n//     new RedstoneRepeater({}),\n//     new RedstoneDust({}),\n//     new Lever({}),\n//     new Button({}),\n//     new Piston({ isSticky: true }),\n//     new ObserverBlock({}),\n//     new Obsidian({}),\n//     new TargetBlock({}),\n//     new RedstoneComparator({}),\n//     new RedstoneJunction({}),\n//     new RedstoneCauldron({})\n//   ]\n//   getColors().forEach(color => {\n//     blocks.push(new WoolBlock({ color }))\n//   })\n//   getColors().forEach(color => {\n//     blocks.push(new ConcretePowder({ color }))\n//   })\n//   return blocks\n// }\n// export const placeAllBlocks = (blocks: BlockContainer) => {\n//   const allBlocks = listSelectableBlocks()\n//   allBlocks\n//     .filter(\n//       block =>\n//         ![BlockType.ConcretePowder, BlockType.WoolBlock].includes(block.type)\n//     )\n//     .forEach((block, x) => {\n//       blocks.setValue({ x, y: 2 }, block)\n//     })\n//   allBlocks\n//     .filter(block => [BlockType.WoolBlock].includes(block.type))\n//     .forEach((block, x) => {\n//       blocks.setValue({ x, y: 0 }, block)\n//     })\n//   allBlocks\n//     .filter(block => [BlockType.ConcretePowder].includes(block.type))\n//     .forEach((block, x) => {\n//       blocks.setValue({ x, y: 1 }, block)\n//     })\n// }\nconst loadChunks = (chunks, blocks) => {\n    const chunkDict = new array2d_1.Dict2D2(chunks);\n    // console.log(chunkDict)\n    chunkDict.map((block, v) => {\n        blocks.setValue(v, (0, create_block_1.createBlock)(block.type, block));\n    });\n};\nexports.loadChunks = loadChunks;\nconst createEmptyBlockContainer = () => {\n    const blocks = new array2d_1.ChunkContainer(16, () => new air_1.Air({}), (block) => block.type === block_1.BlockType.Air, true);\n    return blocks;\n};\nexports.createEmptyBlockContainer = createEmptyBlockContainer;\nconst createDemoWorld = async () => {\n    const blocks = (0, exports.createEmptyBlockContainer)();\n    const chunks = (await (0, exports.loadWorldSave)());\n    (0, exports.loadChunks)(chunks, blocks);\n    // placeAllBlocks(blocks)\n    return blocks;\n};\nexports.createDemoWorld = createDemoWorld;\nconst createEmptyWorld = () => {\n    const blocks = (0, exports.createEmptyBlockContainer)();\n    return blocks;\n};\nexports.createEmptyWorld = createEmptyWorld;\nconst downloadWorld = (blocks, compress) => {\n    const blocksForStorage = blocks.mapToDict2D((block, v) => {\n        return block;\n    });\n    let stringValue;\n    if (compress) {\n        stringValue = (0, save_1.compressObject)(Object.fromEntries(blocksForStorage.items));\n        (0, general_1.downloadFile)(stringValue, 'world.txt');\n    }\n    else {\n        stringValue = JSON.stringify(Object.fromEntries(blocksForStorage.items), null, 2);\n        (0, general_1.downloadFile)(stringValue, 'world.json');\n    }\n};\nexports.downloadWorld = downloadWorld;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/core/world_loading.ts?");

/***/ }),

/***/ "./src/images/tilemap.ts":
/*!*******************************!*\
  !*** ./src/images/tilemap.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tilemap = void 0;\nexports.tilemap = {\n    \"black_concrete_powder\": {\n        \"x\": 1,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"black_wool\": {\n        \"x\": 35,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"blue_concrete_powder\": {\n        \"x\": 69,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"blue_wool\": {\n        \"x\": 103,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"brown_concrete_powder\": {\n        \"x\": 137,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"brown_wool\": {\n        \"x\": 171,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"button_off\": {\n        \"x\": 205,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"button_on\": {\n        \"x\": 239,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_off_down\": {\n        \"x\": 273,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_off_left\": {\n        \"x\": 307,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_off_right\": {\n        \"x\": 341,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_off_up\": {\n        \"x\": 375,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_on_down\": {\n        \"x\": 409,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_on_left\": {\n        \"x\": 443,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_on_right\": {\n        \"x\": 477,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_add_on_up\": {\n        \"x\": 511,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_base_down\": {\n        \"x\": 545,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_base_left\": {\n        \"x\": 579,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_base_right\": {\n        \"x\": 613,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_base_up\": {\n        \"x\": 647,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_off_down\": {\n        \"x\": 681,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_off_left\": {\n        \"x\": 715,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_off_right\": {\n        \"x\": 749,\n        \"y\": 1,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_off_up\": {\n        \"x\": 1,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_on_down\": {\n        \"x\": 35,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_on_left\": {\n        \"x\": 69,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_on_right\": {\n        \"x\": 103,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"comparator_subtract_on_up\": {\n        \"x\": 137,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"cyan_concrete_powder\": {\n        \"x\": 171,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"cyan_wool\": {\n        \"x\": 205,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_complete_down\": {\n        \"x\": 239,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_complete_left\": {\n        \"x\": 273,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_complete_right\": {\n        \"x\": 307,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_complete_up\": {\n        \"x\": 341,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_pending_down\": {\n        \"x\": 375,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_pending_left\": {\n        \"x\": 409,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_pending_right\": {\n        \"x\": 443,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"extension_pending_up\": {\n        \"x\": 477,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"fallen\": {\n        \"x\": 511,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"falling\": {\n        \"x\": 545,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"glass\": {\n        \"x\": 579,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"gray_concrete_powder\": {\n        \"x\": 613,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"gray_wool\": {\n        \"x\": 647,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"green_concrete_powder\": {\n        \"x\": 681,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"green_wool\": {\n        \"x\": 715,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"junction\": {\n        \"x\": 749,\n        \"y\": 35,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"junction_on_horizontal\": {\n        \"x\": 1,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"junction_on_vertical\": {\n        \"x\": 35,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"lever_off\": {\n        \"x\": 69,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"lever_on\": {\n        \"x\": 103,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"light_blue_concrete_powder\": {\n        \"x\": 137,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"light_blue_wool\": {\n        \"x\": 171,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"light_gray_concrete_powder\": {\n        \"x\": 205,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"light_gray_wool\": {\n        \"x\": 239,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"lime_concrete_powder\": {\n        \"x\": 273,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"lime_wool\": {\n        \"x\": 307,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"magenta_concrete_powder\": {\n        \"x\": 341,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"magenta_wool\": {\n        \"x\": 375,\n        \"y\": 69,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"number_0\": {\n        \"x\": 409,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_1\": {\n        \"x\": 443,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_10\": {\n        \"x\": 477,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_11\": {\n        \"x\": 511,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_12\": {\n        \"x\": 545,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_13\": {\n        \"x\": 579,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_14\": {\n        \"x\": 613,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_15\": {\n        \"x\": 647,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_2\": {\n        \"x\": 681,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_3\": {\n        \"x\": 715,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_4\": {\n        \"x\": 749,\n        \"y\": 69,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_5\": {\n        \"x\": 1,\n        \"y\": 103,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_6\": {\n        \"x\": 35,\n        \"y\": 103,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_7\": {\n        \"x\": 69,\n        \"y\": 103,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_8\": {\n        \"x\": 103,\n        \"y\": 103,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"number_9\": {\n        \"x\": 137,\n        \"y\": 103,\n        \"w\": 32,\n        \"h\": 32\n    },\n    \"observer_off_down\": {\n        \"x\": 171,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"observer_off_left\": {\n        \"x\": 205,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"observer_off_right\": {\n        \"x\": 239,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"observer_off_up\": {\n        \"x\": 273,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"observer_on_down\": {\n        \"x\": 307,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"observer_on_left\": {\n        \"x\": 341,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"observer_on_right\": {\n        \"x\": 375,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"observer_on_up\": {\n        \"x\": 409,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"obsidian\": {\n        \"x\": 443,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"orange_concrete_powder\": {\n        \"x\": 477,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"orange_wool\": {\n        \"x\": 511,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"pink_concrete_powder\": {\n        \"x\": 545,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"pink_wool\": {\n        \"x\": 579,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_down\": {\n        \"x\": 613,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_extending_down\": {\n        \"x\": 647,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_extending_left\": {\n        \"x\": 681,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_extending_right\": {\n        \"x\": 715,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_extending_up\": {\n        \"x\": 749,\n        \"y\": 103,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_left\": {\n        \"x\": 1,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_retracting_down\": {\n        \"x\": 35,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_retracting_left\": {\n        \"x\": 69,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_retracting_right\": {\n        \"x\": 103,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_retracting_up\": {\n        \"x\": 137,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_right\": {\n        \"x\": 171,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_head_up\": {\n        \"x\": 205,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_down\": {\n        \"x\": 239,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_extended_down\": {\n        \"x\": 273,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_extended_left\": {\n        \"x\": 307,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_extended_right\": {\n        \"x\": 341,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_extended_up\": {\n        \"x\": 375,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_left\": {\n        \"x\": 409,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_right\": {\n        \"x\": 443,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_off_up\": {\n        \"x\": 477,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_on_down\": {\n        \"x\": 511,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_on_left\": {\n        \"x\": 545,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_on_right\": {\n        \"x\": 579,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"piston_on_up\": {\n        \"x\": 613,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"purple_concrete_powder\": {\n        \"x\": 647,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"purple_wool\": {\n        \"x\": 681,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_block\": {\n        \"x\": 715,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron\": {\n        \"x\": 749,\n        \"y\": 137,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_1\": {\n        \"x\": 1,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_11\": {\n        \"x\": 35,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_13\": {\n        \"x\": 69,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_15\": {\n        \"x\": 103,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_3\": {\n        \"x\": 137,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_5\": {\n        \"x\": 171,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_7\": {\n        \"x\": 205,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_cauldron_on_9\": {\n        \"x\": 239,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_0\": {\n        \"x\": 273,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_1\": {\n        \"x\": 307,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_10\": {\n        \"x\": 341,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_11\": {\n        \"x\": 375,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_12\": {\n        \"x\": 409,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_13\": {\n        \"x\": 443,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_14\": {\n        \"x\": 477,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_15\": {\n        \"x\": 511,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_2\": {\n        \"x\": 545,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_3\": {\n        \"x\": 579,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_4\": {\n        \"x\": 613,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_5\": {\n        \"x\": 647,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_6\": {\n        \"x\": 681,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_7\": {\n        \"x\": 715,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_8\": {\n        \"x\": 749,\n        \"y\": 171,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_9\": {\n        \"x\": 1,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_0\": {\n        \"x\": 35,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_1\": {\n        \"x\": 69,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_10\": {\n        \"x\": 103,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_11\": {\n        \"x\": 137,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_12\": {\n        \"x\": 171,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_13\": {\n        \"x\": 205,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_14\": {\n        \"x\": 239,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_15\": {\n        \"x\": 273,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_2\": {\n        \"x\": 307,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_3\": {\n        \"x\": 341,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_4\": {\n        \"x\": 375,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_5\": {\n        \"x\": 409,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_6\": {\n        \"x\": 443,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_7\": {\n        \"x\": 477,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_8\": {\n        \"x\": 511,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_9\": {\n        \"x\": 545,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_0\": {\n        \"x\": 579,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_1\": {\n        \"x\": 613,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_10\": {\n        \"x\": 647,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_11\": {\n        \"x\": 681,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_12\": {\n        \"x\": 715,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_13\": {\n        \"x\": 749,\n        \"y\": 205,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_14\": {\n        \"x\": 1,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_15\": {\n        \"x\": 35,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_2\": {\n        \"x\": 69,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_3\": {\n        \"x\": 103,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_4\": {\n        \"x\": 137,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_5\": {\n        \"x\": 171,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_6\": {\n        \"x\": 205,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_7\": {\n        \"x\": 239,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_8\": {\n        \"x\": 273,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_9\": {\n        \"x\": 307,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_0\": {\n        \"x\": 341,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_1\": {\n        \"x\": 375,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_10\": {\n        \"x\": 409,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_11\": {\n        \"x\": 443,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_12\": {\n        \"x\": 477,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_13\": {\n        \"x\": 511,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_14\": {\n        \"x\": 545,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_15\": {\n        \"x\": 579,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_2\": {\n        \"x\": 613,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_3\": {\n        \"x\": 647,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_4\": {\n        \"x\": 681,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_5\": {\n        \"x\": 715,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_6\": {\n        \"x\": 749,\n        \"y\": 239,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_7\": {\n        \"x\": 1,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_8\": {\n        \"x\": 35,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_left_right_9\": {\n        \"x\": 69,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_0\": {\n        \"x\": 103,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_1\": {\n        \"x\": 137,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_10\": {\n        \"x\": 171,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_11\": {\n        \"x\": 205,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_12\": {\n        \"x\": 239,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_13\": {\n        \"x\": 273,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_14\": {\n        \"x\": 307,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_15\": {\n        \"x\": 341,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_2\": {\n        \"x\": 375,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_3\": {\n        \"x\": 409,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_4\": {\n        \"x\": 443,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_5\": {\n        \"x\": 477,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_6\": {\n        \"x\": 511,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_7\": {\n        \"x\": 545,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_8\": {\n        \"x\": 579,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_down_right_9\": {\n        \"x\": 613,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_0\": {\n        \"x\": 647,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_1\": {\n        \"x\": 681,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_10\": {\n        \"x\": 715,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_11\": {\n        \"x\": 749,\n        \"y\": 273,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_12\": {\n        \"x\": 1,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_13\": {\n        \"x\": 35,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_14\": {\n        \"x\": 69,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_15\": {\n        \"x\": 103,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_2\": {\n        \"x\": 137,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_3\": {\n        \"x\": 171,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_4\": {\n        \"x\": 205,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_5\": {\n        \"x\": 239,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_6\": {\n        \"x\": 273,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_7\": {\n        \"x\": 307,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_8\": {\n        \"x\": 341,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_9\": {\n        \"x\": 375,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_0\": {\n        \"x\": 409,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_1\": {\n        \"x\": 443,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_10\": {\n        \"x\": 477,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_11\": {\n        \"x\": 511,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_12\": {\n        \"x\": 545,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_13\": {\n        \"x\": 579,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_14\": {\n        \"x\": 613,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_15\": {\n        \"x\": 647,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_2\": {\n        \"x\": 681,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_3\": {\n        \"x\": 715,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_4\": {\n        \"x\": 749,\n        \"y\": 307,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_5\": {\n        \"x\": 1,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_6\": {\n        \"x\": 35,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_7\": {\n        \"x\": 69,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_8\": {\n        \"x\": 103,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_left_right_9\": {\n        \"x\": 137,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_0\": {\n        \"x\": 171,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_1\": {\n        \"x\": 205,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_10\": {\n        \"x\": 239,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_11\": {\n        \"x\": 273,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_12\": {\n        \"x\": 307,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_13\": {\n        \"x\": 341,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_14\": {\n        \"x\": 375,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_15\": {\n        \"x\": 409,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_2\": {\n        \"x\": 443,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_3\": {\n        \"x\": 477,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_4\": {\n        \"x\": 511,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_5\": {\n        \"x\": 545,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_6\": {\n        \"x\": 579,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_7\": {\n        \"x\": 613,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_8\": {\n        \"x\": 647,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_right_9\": {\n        \"x\": 681,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_0\": {\n        \"x\": 715,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_1\": {\n        \"x\": 749,\n        \"y\": 341,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_10\": {\n        \"x\": 1,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_11\": {\n        \"x\": 35,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_12\": {\n        \"x\": 69,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_13\": {\n        \"x\": 103,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_14\": {\n        \"x\": 137,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_15\": {\n        \"x\": 171,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_2\": {\n        \"x\": 205,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_3\": {\n        \"x\": 239,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_4\": {\n        \"x\": 273,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_5\": {\n        \"x\": 307,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_6\": {\n        \"x\": 341,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_7\": {\n        \"x\": 375,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_8\": {\n        \"x\": 409,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_9\": {\n        \"x\": 443,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_0\": {\n        \"x\": 477,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_1\": {\n        \"x\": 511,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_10\": {\n        \"x\": 545,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_11\": {\n        \"x\": 579,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_12\": {\n        \"x\": 613,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_13\": {\n        \"x\": 647,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_14\": {\n        \"x\": 681,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_15\": {\n        \"x\": 715,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_2\": {\n        \"x\": 749,\n        \"y\": 375,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_3\": {\n        \"x\": 1,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_4\": {\n        \"x\": 35,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_5\": {\n        \"x\": 69,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_6\": {\n        \"x\": 103,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_7\": {\n        \"x\": 137,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_8\": {\n        \"x\": 171,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_9\": {\n        \"x\": 205,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_0\": {\n        \"x\": 239,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_1\": {\n        \"x\": 273,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_10\": {\n        \"x\": 307,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_11\": {\n        \"x\": 341,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_12\": {\n        \"x\": 375,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_13\": {\n        \"x\": 409,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_14\": {\n        \"x\": 443,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_15\": {\n        \"x\": 477,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_2\": {\n        \"x\": 511,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_3\": {\n        \"x\": 545,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_4\": {\n        \"x\": 579,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_5\": {\n        \"x\": 613,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_6\": {\n        \"x\": 647,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_7\": {\n        \"x\": 681,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_8\": {\n        \"x\": 715,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_9\": {\n        \"x\": 749,\n        \"y\": 409,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_0\": {\n        \"x\": 1,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_1\": {\n        \"x\": 35,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_10\": {\n        \"x\": 69,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_11\": {\n        \"x\": 103,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_12\": {\n        \"x\": 137,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_13\": {\n        \"x\": 171,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_14\": {\n        \"x\": 205,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_15\": {\n        \"x\": 239,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_2\": {\n        \"x\": 273,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_3\": {\n        \"x\": 307,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_4\": {\n        \"x\": 341,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_5\": {\n        \"x\": 375,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_6\": {\n        \"x\": 409,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_7\": {\n        \"x\": 443,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_8\": {\n        \"x\": 477,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_left_right_9\": {\n        \"x\": 511,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_0\": {\n        \"x\": 545,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_1\": {\n        \"x\": 579,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_10\": {\n        \"x\": 613,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_11\": {\n        \"x\": 647,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_12\": {\n        \"x\": 681,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_13\": {\n        \"x\": 715,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_14\": {\n        \"x\": 749,\n        \"y\": 443,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_15\": {\n        \"x\": 1,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_2\": {\n        \"x\": 35,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_3\": {\n        \"x\": 69,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_4\": {\n        \"x\": 103,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_5\": {\n        \"x\": 137,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_6\": {\n        \"x\": 171,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_7\": {\n        \"x\": 205,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_8\": {\n        \"x\": 239,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_down_right_9\": {\n        \"x\": 273,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_0\": {\n        \"x\": 307,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_1\": {\n        \"x\": 341,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_10\": {\n        \"x\": 375,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_11\": {\n        \"x\": 409,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_12\": {\n        \"x\": 443,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_13\": {\n        \"x\": 477,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_14\": {\n        \"x\": 511,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_15\": {\n        \"x\": 545,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_2\": {\n        \"x\": 579,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_3\": {\n        \"x\": 613,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_4\": {\n        \"x\": 647,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_5\": {\n        \"x\": 681,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_6\": {\n        \"x\": 715,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_7\": {\n        \"x\": 749,\n        \"y\": 477,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_8\": {\n        \"x\": 1,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_9\": {\n        \"x\": 35,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_0\": {\n        \"x\": 69,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_1\": {\n        \"x\": 103,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_10\": {\n        \"x\": 137,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_11\": {\n        \"x\": 171,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_12\": {\n        \"x\": 205,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_13\": {\n        \"x\": 239,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_14\": {\n        \"x\": 273,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_15\": {\n        \"x\": 307,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_2\": {\n        \"x\": 341,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_3\": {\n        \"x\": 375,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_4\": {\n        \"x\": 409,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_5\": {\n        \"x\": 443,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_6\": {\n        \"x\": 477,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_7\": {\n        \"x\": 511,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_8\": {\n        \"x\": 545,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_left_right_9\": {\n        \"x\": 579,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_0\": {\n        \"x\": 613,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_1\": {\n        \"x\": 647,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_10\": {\n        \"x\": 681,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_11\": {\n        \"x\": 715,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_12\": {\n        \"x\": 749,\n        \"y\": 511,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_13\": {\n        \"x\": 1,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_14\": {\n        \"x\": 35,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_15\": {\n        \"x\": 69,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_2\": {\n        \"x\": 103,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_3\": {\n        \"x\": 137,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_4\": {\n        \"x\": 171,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_5\": {\n        \"x\": 205,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_6\": {\n        \"x\": 239,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_7\": {\n        \"x\": 273,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_8\": {\n        \"x\": 307,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_dust_up_right_9\": {\n        \"x\": 341,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_lamp_off\": {\n        \"x\": 375,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_lamp_on\": {\n        \"x\": 409,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_base_down\": {\n        \"x\": 443,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_base_left\": {\n        \"x\": 477,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_base_right\": {\n        \"x\": 511,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_base_up\": {\n        \"x\": 545,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_locked_down\": {\n        \"x\": 579,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_locked_left\": {\n        \"x\": 613,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_locked_right\": {\n        \"x\": 647,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_locked_up\": {\n        \"x\": 681,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_1_down\": {\n        \"x\": 715,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_1_left\": {\n        \"x\": 749,\n        \"y\": 545,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_1_right\": {\n        \"x\": 1,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_1_up\": {\n        \"x\": 35,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_2_down\": {\n        \"x\": 69,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_2_left\": {\n        \"x\": 103,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_2_right\": {\n        \"x\": 137,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_2_up\": {\n        \"x\": 171,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_3_down\": {\n        \"x\": 205,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_3_left\": {\n        \"x\": 239,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_3_right\": {\n        \"x\": 273,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_3_up\": {\n        \"x\": 307,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_4_down\": {\n        \"x\": 341,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_4_left\": {\n        \"x\": 375,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_4_right\": {\n        \"x\": 409,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_0_off_4_up\": {\n        \"x\": 443,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_0_down\": {\n        \"x\": 477,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_0_left\": {\n        \"x\": 511,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_0_right\": {\n        \"x\": 545,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_0_up\": {\n        \"x\": 579,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_down\": {\n        \"x\": 613,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_left\": {\n        \"x\": 647,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_powered_down\": {\n        \"x\": 681,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_powered_left\": {\n        \"x\": 715,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_powered_right\": {\n        \"x\": 749,\n        \"y\": 579,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_powered_up\": {\n        \"x\": 1,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_right\": {\n        \"x\": 35,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_1_up\": {\n        \"x\": 69,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_down\": {\n        \"x\": 103,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_left\": {\n        \"x\": 137,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_powered_down\": {\n        \"x\": 171,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_powered_left\": {\n        \"x\": 205,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_powered_right\": {\n        \"x\": 239,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_powered_up\": {\n        \"x\": 273,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_right\": {\n        \"x\": 307,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_2_up\": {\n        \"x\": 341,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_down\": {\n        \"x\": 375,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_left\": {\n        \"x\": 409,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_powered_down\": {\n        \"x\": 443,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_powered_left\": {\n        \"x\": 477,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_powered_right\": {\n        \"x\": 511,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_powered_up\": {\n        \"x\": 545,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_right\": {\n        \"x\": 579,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_1_off_3_up\": {\n        \"x\": 613,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_0_down\": {\n        \"x\": 647,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_0_left\": {\n        \"x\": 681,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_0_right\": {\n        \"x\": 715,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_0_up\": {\n        \"x\": 749,\n        \"y\": 613,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_down\": {\n        \"x\": 1,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_left\": {\n        \"x\": 35,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_powered_down\": {\n        \"x\": 69,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_powered_left\": {\n        \"x\": 103,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_powered_right\": {\n        \"x\": 137,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_powered_up\": {\n        \"x\": 171,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_right\": {\n        \"x\": 205,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_1_up\": {\n        \"x\": 239,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_down\": {\n        \"x\": 273,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_left\": {\n        \"x\": 307,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_powered_down\": {\n        \"x\": 341,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_powered_left\": {\n        \"x\": 375,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_powered_right\": {\n        \"x\": 409,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_powered_up\": {\n        \"x\": 443,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_right\": {\n        \"x\": 477,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_2_off_2_up\": {\n        \"x\": 511,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_0_down\": {\n        \"x\": 545,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_0_left\": {\n        \"x\": 579,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_0_right\": {\n        \"x\": 613,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_0_up\": {\n        \"x\": 647,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_down\": {\n        \"x\": 681,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_left\": {\n        \"x\": 715,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_powered_down\": {\n        \"x\": 749,\n        \"y\": 647,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_powered_left\": {\n        \"x\": 1,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_powered_right\": {\n        \"x\": 35,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_powered_up\": {\n        \"x\": 69,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_right\": {\n        \"x\": 103,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_3_off_1_up\": {\n        \"x\": 137,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_4_off_0_down\": {\n        \"x\": 171,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_4_off_0_left\": {\n        \"x\": 205,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_4_off_0_right\": {\n        \"x\": 239,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_repeater_on_4_off_0_up\": {\n        \"x\": 273,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_off_down\": {\n        \"x\": 307,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_off_left\": {\n        \"x\": 341,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_off_right\": {\n        \"x\": 375,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_off_up\": {\n        \"x\": 409,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_on_down\": {\n        \"x\": 443,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_on_left\": {\n        \"x\": 477,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_on_right\": {\n        \"x\": 511,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"redstone_torch_on_up\": {\n        \"x\": 545,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"red_concrete_powder\": {\n        \"x\": 579,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"red_wool\": {\n        \"x\": 613,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_complete_down\": {\n        \"x\": 647,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_complete_left\": {\n        \"x\": 681,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_complete_right\": {\n        \"x\": 715,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_complete_up\": {\n        \"x\": 749,\n        \"y\": 681,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_pending_down\": {\n        \"x\": 1,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_pending_left\": {\n        \"x\": 35,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_pending_right\": {\n        \"x\": 69,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"retraction_pending_up\": {\n        \"x\": 103,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sign\": {\n        \"x\": 137,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_down\": {\n        \"x\": 171,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_extending_down\": {\n        \"x\": 205,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_extending_left\": {\n        \"x\": 239,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_extending_right\": {\n        \"x\": 273,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_extending_up\": {\n        \"x\": 307,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_left\": {\n        \"x\": 341,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_retracting_down\": {\n        \"x\": 375,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_retracting_left\": {\n        \"x\": 409,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_retracting_right\": {\n        \"x\": 443,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_retracting_up\": {\n        \"x\": 477,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_right\": {\n        \"x\": 511,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_head_up\": {\n        \"x\": 545,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_down\": {\n        \"x\": 579,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_extended_down\": {\n        \"x\": 613,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_extended_left\": {\n        \"x\": 647,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_extended_right\": {\n        \"x\": 681,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_extended_up\": {\n        \"x\": 715,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_left\": {\n        \"x\": 749,\n        \"y\": 715,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_right\": {\n        \"x\": 1,\n        \"y\": 749,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"sticky_piston_off_up\": {\n        \"x\": 35,\n        \"y\": 749,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"target_block\": {\n        \"x\": 69,\n        \"y\": 749,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"white_concrete_powder\": {\n        \"x\": 103,\n        \"y\": 749,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"white_wool\": {\n        \"x\": 137,\n        \"y\": 749,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"yellow_concrete_powder\": {\n        \"x\": 171,\n        \"y\": 749,\n        \"w\": 16,\n        \"h\": 16\n    },\n    \"yellow_wool\": {\n        \"x\": 205,\n        \"y\": 749,\n        \"w\": 16,\n        \"h\": 16\n    }\n};\n\n\n//# sourceURL=webpack://cellular-redstone/./src/images/tilemap.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst vec2_1 = __webpack_require__(/*! ./containers/vec2 */ \"./src/containers/vec2.ts\");\nconst block_1 = __webpack_require__(/*! ./core/block */ \"./src/core/block.ts\");\nconst block_import_1 = __webpack_require__(/*! ./core/block_import */ \"./src/core/block_import.ts\");\nconst commands_1 = __webpack_require__(/*! ./core/commands */ \"./src/core/commands.ts\");\nconst command_line_1 = __webpack_require__(/*! ./core/command_line */ \"./src/core/command_line.ts\");\nconst debug_panel_1 = __webpack_require__(/*! ./core/debug_panel */ \"./src/core/debug_panel.ts\");\nconst game_loop_1 = __webpack_require__(/*! ./core/game_loop */ \"./src/core/game_loop.ts\");\nconst guide_1 = __webpack_require__(/*! ./core/guide */ \"./src/core/guide.ts\");\nconst inventory_1 = __webpack_require__(/*! ./core/inventory */ \"./src/core/inventory.ts\");\nconst storage_1 = __webpack_require__(/*! ./core/storage */ \"./src/core/storage.ts\");\nconst user_input_1 = __webpack_require__(/*! ./core/user_input */ \"./src/core/user_input.ts\");\nconst world_loading_1 = __webpack_require__(/*! ./core/world_loading */ \"./src/core/world_loading.ts\");\nconst canvas_1 = __webpack_require__(/*! ./rendering/canvas */ \"./src/rendering/canvas.ts\");\nconst image_loader_1 = __webpack_require__(/*! ./rendering/image_loader */ \"./src/rendering/image_loader.ts\");\nconst createCanvas = async (textureAtlas) => {\n    const canvasElement = document.getElementById('canvas');\n    const canvas = new canvas_1.Canvas(canvasElement, textureAtlas, 40, 1.05, (0, vec2_1.vec2Zero)());\n    return canvas;\n};\nconst main = async () => {\n    const reset = (0, storage_1.clearStorageOnVersionIncrease)();\n    (0, block_import_1.loadBlockFiles)();\n    (0, storage_1.initialiseStorage)();\n    (0, debug_panel_1.initialiseDebugPanel)();\n    (0, command_line_1.initialiseCommandLine)();\n    (0, guide_1.initialiseGuide)();\n    const textureAtlas = await (0, image_loader_1.loadImages)();\n    (0, inventory_1.initialiseInventory)(textureAtlas);\n    const canvas = await createCanvas(textureAtlas);\n    const blocks = storage_1.storage.blockStorage.get();\n    // placeAllBlocks(blocks)\n    if (reset) {\n        blocks.clone(await (0, world_loading_1.createDemoWorld)());\n        (0, guide_1.showGuide)();\n    }\n    console.log(blocks);\n    setInterval(() => {\n        (0, debug_panel_1.updateDebugInfo)();\n    }, 500);\n    const { processLogic, addToTickQueue, fillUpdateQueue } = (0, game_loop_1.createLogicLoop)(blocks, canvas);\n    (0, user_input_1.initBlockEventListeners)(canvas, blocks, addToTickQueue);\n    (0, user_input_1.initCanvasResizeListener)();\n    // load commands\n    const commandManager = new command_line_1.CommandManager();\n    (0, commands_1.initialiseCommands)(commandManager, blocks, canvas, fillUpdateQueue);\n    (0, command_line_1.initCommandLineEventListeners)(commandManager);\n    // initialise render and processing loop\n    let elapsedFramesInSecond = 0;\n    setInterval(() => {\n        storage_1.storage.actualFramesPerSecondState.set(elapsedFramesInSecond);\n        elapsedFramesInSecond = 0;\n    }, 1000);\n    const renderLoop = new game_loop_1.RenderLoop(storage_1.storage.framesPerSecondState.get(), () => {\n        canvas.render();\n        elapsedFramesInSecond += 1;\n    });\n    const logicLoop = new game_loop_1.ProcessLoop(storage_1.storage.updatesPerSecondState.get(), processLogic);\n    storage_1.storage.framesPerSecondState.setCallback = (x) => {\n        renderLoop.setFrameRate(x);\n        renderLoop.start();\n    };\n    storage_1.storage.updatesPerSecondState.setCallback = (x) => {\n        logicLoop.setFrameRate(x);\n        logicLoop.start();\n    };\n    document.addEventListener('keydown', event => {\n        if (!(0, user_input_1.isBodyCurrentlyFocused)()) {\n            return;\n        }\n        if (event.ctrlKey) {\n            if (event.key === 'v') {\n                const position = (0, vec2_1.vec2Apply)(canvas.getMouseWorldPosition(), Math.floor);\n                const selectedBlocks = storage_1.storage.selectedBlockStorage.get();\n                // console.log('paste selected blocks', selectedBlocks)\n                selectedBlocks.foreach((block, v) => {\n                    if (block.type === block_1.BlockType.Air)\n                        return;\n                    const newPosition = (0, vec2_1.vec2Add)(v, position);\n                    blocks.setValue(newPosition, block);\n                    // add all pasted blocks and their neighbours to queue\n                    addToTickQueue(newPosition);\n                });\n            }\n        }\n        else {\n            if (event.key === 'z') {\n                storage_1.storage.viewSubTicksState.set(!storage_1.storage.viewSubTicksState.get());\n            }\n            else if (event.key === 'x') {\n                logicLoop.stop();\n                storage_1.storage.updatesPerSecondState.set(0);\n                processLogic();\n            }\n            else if (event.key === 'c') {\n                storage_1.storage.updatesPerSecondState.set(5);\n            }\n            else if (event.key === 'v') {\n                storage_1.storage.updatesPerSecondState.set(9999);\n            }\n        }\n    });\n    // TODO: do not need to update canvas blocks unless rendering\n    (0, game_loop_1.updateCanvasBlocks)(blocks, canvas);\n    renderLoop.start();\n    if (storage_1.storage.updatesPerSecondState.get() > 0) {\n        logicLoop.start();\n    }\n};\nmain();\n// webglCanvas3()\n\n\n//# sourceURL=webpack://cellular-redstone/./src/index.ts?");

/***/ }),

/***/ "./src/rendering/canvas.ts":
/*!*********************************!*\
  !*** ./src/rendering/canvas.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Canvas = void 0;\nconst array2d_1 = __webpack_require__(/*! ../containers/array2d */ \"./src/containers/array2d.ts\");\nconst vec2_1 = __webpack_require__(/*! ../containers/vec2 */ \"./src/containers/vec2.ts\");\nconst tilemap_1 = __webpack_require__(/*! ../images/tilemap */ \"./src/images/tilemap.ts\");\nconst save_1 = __webpack_require__(/*! ../utils/save */ \"./src/utils/save.ts\");\nfunction roundToNearestPowerOf2(number) {\n    // Check if the number is already a power of 2\n    if ((number & (number - 1)) === 0) {\n        return number;\n    }\n    // Find the nearest power of 2 greater than the given number\n    let power = 1;\n    while (power < number) {\n        power <<= 1;\n    }\n    // Check if the lower or upper power of 2 is closer\n    const lowerPower = power >>> 1;\n    const upperPower = power;\n    return upperPower - number < number - lowerPower ? upperPower : lowerPower;\n}\nfunction floorToNearest(value, target) {\n    return Math.floor(value / target) * target;\n}\nclass Canvas {\n    canvas;\n    ctx;\n    images;\n    imageGrid;\n    // panning and scaling\n    scale;\n    scaleFactor;\n    offset;\n    mouse;\n    constructor(canvas, images, scale, scaleFactor, offset) {\n        this.canvas = canvas;\n        // no anti-aliasing\n        this.ctx = canvas.getContext('2d');\n        this.ctx.imageSmoothingEnabled = false;\n        this.images = images;\n        this.imageGrid = new array2d_1.Dict2D();\n        // this.scale = createState(scale, 'canvas-scale')\n        this.scale = new save_1.LocalStorageVariable({\n            localStorageKey: 'canvas-scale',\n            defaultValue: scale,\n            saveInterval: 1000\n        });\n        this.scaleFactor = scaleFactor;\n        // this.offset = createState(offset, 'canvas-offset')\n        this.offset = new save_1.LocalStorageVariable({\n            localStorageKey: 'canvas-offset',\n            defaultValue: offset,\n            saveInterval: 1000\n        });\n        this.mouse = { x: 0, y: 0 };\n        this.handlePanning();\n        this.handleScaling();\n    }\n    // screen to canvas AND canvas to screen\n    calculateAxisFlippedPosition = (x, y) => {\n        return { x: x, y: this.canvas.height - y };\n    };\n    // world to canvas\n    calculateWorldToScreenPosition = (x, y) => {\n        return {\n            x: x * this.scale.get() + this.offset.get().x,\n            y: y * this.scale.get() + this.offset.get().y\n        };\n    };\n    // canvas to world\n    calculateScreenToWorldPosition = (x, y) => {\n        return {\n            x: (x - this.offset.get().x) / this.scale.get(),\n            y: (y - this.offset.get().y) / this.scale.get()\n        };\n    };\n    getMouseWorldPosition(mouse) {\n        if (!mouse) {\n            mouse = this.mouse;\n        }\n        const axisFlippedPos = this.calculateAxisFlippedPosition(mouse.x, mouse.y);\n        const worldPos = this.calculateScreenToWorldPosition(axisFlippedPos.x, axisFlippedPos.y);\n        return worldPos;\n    }\n    handlePanning = () => {\n        const canvas = this.canvas;\n        let lastMouse = { x: 0, y: 0 };\n        let lastOffset = { x: 0, y: 0 };\n        let isPanning = false;\n        let hasMetMinimumMovementThreshold = false;\n        let movementThreshold = 8;\n        const checkMovementThreshold = (offset) => {\n            if (hasMetMinimumMovementThreshold)\n                return;\n            if (offset.x * offset.x + offset.y * offset.y >\n                movementThreshold * movementThreshold) {\n                lastMouse = this.mouse;\n                hasMetMinimumMovementThreshold = true;\n            }\n        };\n        const handleMouseMove = (event) => {\n            const pixelRatio = window.devicePixelRatio || 1;\n            this.mouse = {\n                x: event.offsetX * pixelRatio,\n                y: event.offsetY * pixelRatio\n            };\n            if (isPanning) {\n                const mouseOffset = (0, vec2_1.vec2Subtract)(this.mouse, lastMouse);\n                if (hasMetMinimumMovementThreshold) {\n                    this.offset.set((0, vec2_1.vec2Add)(lastOffset, {\n                        x: mouseOffset.x,\n                        y: -mouseOffset.y\n                    }));\n                    this.render();\n                }\n                checkMovementThreshold(mouseOffset);\n            }\n            else {\n                hasMetMinimumMovementThreshold = false;\n                lastMouse = this.mouse;\n                lastOffset = this.offset.get();\n            }\n        };\n        canvas.addEventListener('pointermove', handleMouseMove);\n        canvas.addEventListener('pointerdown', (ev) => {\n            // do not pan world if ctrlKey is pressed\n            if (ev.ctrlKey)\n                return;\n            isPanning = true;\n            lastMouse = this.mouse;\n            lastOffset = this.offset.get();\n        });\n        canvas.addEventListener('pointerup', () => (isPanning = false));\n        canvas.addEventListener('pointerleave', () => (isPanning = false));\n    };\n    scaleAboutPosition(scale, position) {\n        const preScaledScreenPosition = this.calculateWorldToScreenPosition(position.x, position.y);\n        this.scale.set(scale);\n        const postScaledScreenPosition = this.calculateWorldToScreenPosition(position.x, position.y);\n        const scaleOffset = (0, vec2_1.vec2Subtract)(preScaledScreenPosition, postScaledScreenPosition);\n        this.offset.set((0, vec2_1.vec2Add)(this.offset.get(), scaleOffset));\n        this.render();\n    }\n    setScale(pixelsPerUnit) {\n        const centerWorldPosition = this.calculateScreenToWorldPosition(this.canvas.width / 2, this.canvas.height / 2);\n        this.scaleAboutPosition(pixelsPerUnit, centerWorldPosition);\n    }\n    moveTo = (worldPosition) => {\n        const screenPosition = this.calculateWorldToScreenPosition(worldPosition.x, worldPosition.y);\n        const delta = (0, vec2_1.vec2Add)((0, vec2_1.vec2Subtract)(this.offset.get(), screenPosition), {\n            x: this.canvas.width / 2,\n            y: this.canvas.height / 2\n        });\n        console.log('move', delta);\n        this.offset.set(delta);\n    };\n    handleScaling = () => {\n        const handleScroll = (event) => {\n            if (!event.ctrlKey)\n                return;\n            event.preventDefault();\n            // scaleOrigin in world pos\n            const mouseCanvasPosition = this.calculateAxisFlippedPosition(this.mouse.x, this.mouse.y);\n            const mouseWorldPosition = this.calculateScreenToWorldPosition(mouseCanvasPosition.x, mouseCanvasPosition.y);\n            let scale;\n            if (event.deltaY > 0) {\n                scale = this.scale.get() / this.scaleFactor;\n            }\n            else {\n                scale = this.scale.get() * this.scaleFactor;\n            }\n            this.scaleAboutPosition(scale, mouseWorldPosition);\n        };\n        this.canvas.addEventListener('wheel', handleScroll);\n    };\n    drawText = (text, x, y, ctx = this.ctx) => {\n        const q1 = this.calculateWorldToScreenPosition(x, y);\n        const p = this.calculateAxisFlippedPosition(q1.x, q1.y);\n        const offset = 20;\n        if ((p.x < offset || p.x > this.canvas.width - offset) &&\n            (p.y < offset || p.y > this.canvas.height - offset)) {\n            return;\n        }\n        const topRight = this.calculateScreenToWorldPosition(this.canvas.width, this.canvas.height);\n        const bottomLeft = this.calculateScreenToWorldPosition(0, 0);\n        let numCellsWide = topRight.x - bottomLeft.x;\n        const gridSize = this.getGridSize();\n        const screenCellWidth = this.canvas.width / (numCellsWide / gridSize);\n        ctx.fillStyle = 'white';\n        ctx.font = `${screenCellWidth / 4}px Roboto Mono`;\n        // this.ctx.strokeStyle = 'white'\n        // this.ctx.lineWidth = 1\n        // this.ctx.strokeText(text, p.x, p.y - 4, screenCellWidth)\n        ctx.fillText(text, Math.floor(p.x + 3), Math.floor(p.y - 4), screenCellWidth);\n    };\n    getGridSize() {\n        const targetCellSize = 64;\n        const topRight = this.calculateWorldToScreenPosition(1, 1);\n        const bottomLeft = this.calculateWorldToScreenPosition(0, 0);\n        const blockSizePixels = topRight.x - bottomLeft.x;\n        return Math.max(1, Math.floor(roundToNearestPowerOf2(targetCellSize / blockSizePixels)));\n    }\n    drawRect = (x, y, w, h) => {\n        const q1 = this.calculateWorldToScreenPosition(x, y);\n        const p = this.calculateAxisFlippedPosition(q1.x, q1.y);\n        this.ctx.fillRect(Math.floor(p.x), Math.floor(p.y), Math.floor(w * this.scale.get() + (p.x - Math.floor(p.x))), Math.floor(h * this.scale.get() + (p.y - Math.floor(p.y))));\n    };\n    recolorImage(x, y, w, h, mask) {\n        const q1 = this.calculateWorldToScreenPosition(x, y);\n        const p = this.calculateAxisFlippedPosition(q1.x, q1.y + this.scale.get());\n        const settings = {\n            willReadFrequently: true\n        };\n        const imageData = this.ctx.getImageData(Math.floor(p.x), Math.floor(p.y), Math.floor(w * this.scale.get() + (p.x - Math.floor(p.x))), Math.floor(h * this.scale.get() + (p.y - Math.floor(p.y))), settings);\n        const pixels = imageData.data;\n        for (let i = 0; i < pixels.length; ++i) {\n            pixels[i] = mask(i, pixels[i]);\n        }\n        this.ctx.putImageData(imageData, Math.floor(p.x), Math.floor(p.y));\n    }\n    drawImage = (imageName, x, y, w, h) => {\n        const tileInfo = tilemap_1.tilemap[imageName];\n        if (!tileInfo) {\n            console.warn(`ImageName: ${imageName} missing from tilemap`);\n            return;\n        }\n        const image = this.images.get('combinedImage');\n        if (!image)\n            return;\n        // console.log(imageName, tileInfo)\n        const q1 = this.calculateWorldToScreenPosition(x, y);\n        const p = this.calculateAxisFlippedPosition(q1.x, q1.y + this.scale.get());\n        // console.log({ x: p.x - Math.floor(p.x) })\n        this.ctx.drawImage(image, tileInfo.x, tileInfo.y, tileInfo.w, tileInfo.h, Math.floor(p.x), Math.floor(p.y), Math.floor(w * this.scale.get() + (p.x - Math.floor(p.x))), Math.floor(h * this.scale.get() + (p.y - Math.floor(p.y))));\n    };\n    drawLine = (x1, y1, x2, y2, ctx = this.ctx) => {\n        const q1 = this.calculateWorldToScreenPosition(x1, y1);\n        const p1 = this.calculateAxisFlippedPosition(q1.x, q1.y);\n        const q2 = this.calculateWorldToScreenPosition(x2, y2);\n        const p2 = this.calculateAxisFlippedPosition(q2.x, q2.y);\n        ctx.beginPath();\n        ctx.moveTo(Math.floor(p1.x), Math.floor(p1.y));\n        ctx.lineTo(Math.ceil(p2.x), Math.ceil(p2.y));\n        ctx.stroke();\n    };\n    drawGridOverlay(ctx = this.ctx) {\n        const topRight = this.calculateScreenToWorldPosition(this.canvas.width, this.canvas.height);\n        const bottomLeft = this.calculateScreenToWorldPosition(0, 0);\n        const gridSize = this.getGridSize();\n        const setLineStyle = (z) => {\n            const isMajorLine = z % (gridSize * 4) === 0;\n            ctx.lineWidth = isMajorLine ? 1 : 1;\n            ctx.strokeStyle = `rgba(255, 255, 255, ${isMajorLine ? 0.6 : 0.2})`;\n        };\n        for (let y = floorToNearest(bottomLeft.y, gridSize); y < topRight.y; y += gridSize) {\n            setLineStyle(y);\n            this.drawLine(bottomLeft.x, y, topRight.x, y, ctx);\n            this.drawText(`${y}`, bottomLeft.x, y, ctx);\n        }\n        for (let x = floorToNearest(bottomLeft.x, gridSize); x < topRight.x; x += gridSize) {\n            setLineStyle(x);\n            this.drawLine(x, bottomLeft.y, x, topRight.y, ctx);\n            this.drawText(`${x}`, x, bottomLeft.y, ctx);\n        }\n    }\n    drawGrid() {\n        const topRight = (0, vec2_1.vec2Apply)(this.calculateScreenToWorldPosition(this.canvas.width, this.canvas.height), Math.floor);\n        const bottomLeft = (0, vec2_1.vec2Apply)(this.calculateScreenToWorldPosition(0, 0), Math.floor);\n        const mode = true;\n        const scale = this.scale.get();\n        const drawLayer = (v, layer) => {\n            if (layer.minSize && layer.minSize > scale)\n                return;\n            this.ctx.globalCompositeOperation = layer.blendMode ?? 'source-over';\n            this.ctx.globalAlpha = layer.alpha ?? 1.0;\n            this.drawImage(layer.textureName, v.x, v.y, 1, 1);\n            this.ctx.globalCompositeOperation = 'source-over';\n            this.ctx.globalAlpha = 1.0;\n            if (layer.mask) {\n                this.recolorImage(v.x, v.y, 1, 1, layer.mask);\n            }\n            // this.ctx.filter = 'none'\n        };\n        // TODO automatically which render method depending on render space\n        // and grid size. Could chunk imageGrid as well.\n        if (mode) {\n            // attempt to render all blocks and cull those outside render space\n            // good if blocks in world < blocks in render space\n            this.imageGrid.foreach((item, v) => {\n                if (v.x >= bottomLeft.x &&\n                    v.x <= topRight.x + 1 &&\n                    v.y >= bottomLeft.y &&\n                    v.y <= topRight.y + 1) {\n                    if (typeof item === 'string') {\n                        this.drawImage(item, v.x, v.y, 1, 1);\n                    }\n                    else {\n                        for (const layer of item.layers) {\n                            drawLayer(v, layer);\n                        }\n                    }\n                }\n            });\n        }\n        else {\n            // attempt to render all blocks in render space and skip rendering\n            // if block does not exist\n            // good if blocks in render space < blocks in world\n            for (let y = bottomLeft.y; y <= topRight.y + 1; y += 1) {\n                for (let x = bottomLeft.x; x <= topRight.x + 1; x += 1) {\n                    const item = this.imageGrid.getValue({ x, y });\n                    if (item === undefined) {\n                        continue;\n                    }\n                    if (typeof item === 'string') {\n                        this.drawImage(item, x, y, 1, 1);\n                    }\n                    else {\n                        for (const layer of item.layers) {\n                            drawLayer({ x, y }, layer);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    setGridImages(imageGrid) {\n        this.imageGrid = imageGrid;\n    }\n    render() {\n        // draw foreground to cleared canvas\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.drawGrid();\n        // draw background to offscreen canvas so foreground can apply color blending\n        const offscreenCanvas = new OffscreenCanvas(this.canvas.width, this.canvas.height);\n        const offscreenCtx = offscreenCanvas.getContext('2d');\n        offscreenCtx.fillStyle = 'rgb(18, 91, 167)';\n        offscreenCtx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.drawGridOverlay(offscreenCtx);\n        this.ctx.globalCompositeOperation = 'destination-over';\n        this.ctx.drawImage(offscreenCanvas, 0, 0);\n        this.ctx.globalCompositeOperation = 'source-over';\n    }\n}\nexports.Canvas = Canvas;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/rendering/canvas.ts?");

/***/ }),

/***/ "./src/rendering/image_loader.ts":
/*!***************************************!*\
  !*** ./src/rendering/image_loader.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadImages = void 0;\nconst fetchPngFilenames = () => {\n    const context = __webpack_require__(\"./src/images sync \\\\.png$\");\n    return context.keys().map(filename => filename.replace('./', ''));\n};\nconst loadImage = async (path) => {\n    return new Promise(resolve => {\n        const img = new Image();\n        img.src = path;\n        img.onload = () => {\n            resolve(img);\n        };\n    });\n};\nconst loadImages = async () => {\n    const images = new Map();\n    const imagePaths = fetchPngFilenames();\n    // console.log(imagePaths)\n    const loadImagePromises = imagePaths.map(async (path) => {\n        const img = await loadImage('./src/images/' + path);\n        images.set(path.replace('.png', ''), img);\n    });\n    await Promise.all(loadImagePromises);\n    return images;\n};\nexports.loadImages = loadImages;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/rendering/image_loader.ts?");

/***/ }),

/***/ "./src/utils/block_fetching.ts":
/*!*************************************!*\
  !*** ./src/utils/block_fetching.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAllNeighbourBlocks = exports.getNeighbourBlocks = exports.getOppositeRelativeDirection = exports.getNeighbourBlock = void 0;\nconst air_1 = __webpack_require__(/*! ../blocks/air */ \"./src/blocks/air.ts\");\nconst vec2_1 = __webpack_require__(/*! ../containers/vec2 */ \"./src/containers/vec2.ts\");\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst direction_1 = __webpack_require__(/*! ../core/direction */ \"./src/core/direction.ts\");\nconst getNeighbourBlock = (position, blocks, direction, useAbsoluteDirection = false) => {\n    const block = blocks.getValue(position);\n    let relativeDirection = direction;\n    if ((0, block_1.isDirectionalBlock)(block) && !useAbsoluteDirection) {\n        relativeDirection = (0, direction_1.getRelativeDirection)(block.direction, direction);\n    }\n    const offset = (0, direction_1.directionToVec2)(relativeDirection);\n    const neighbour = blocks.getValue((0, vec2_1.vec2Add)(position, offset)) ?? new air_1.Air();\n    return neighbour;\n};\nexports.getNeighbourBlock = getNeighbourBlock;\nconst getOppositeRelativeDirection = (position, blocks, direction) => {\n    const block = blocks.getValue(position);\n    let relativeDirection = direction;\n    if ((0, block_1.isDirectionalBlock)(block)) {\n        relativeDirection = (0, direction_1.getRelativeDirection)(block.direction, direction);\n    }\n    return (0, direction_1.getOppositeDirection)(relativeDirection);\n};\nexports.getOppositeRelativeDirection = getOppositeRelativeDirection;\nconst getNeighbourBlocks = (position, blocks, directions) => {\n    return directions.map(direction => (0, exports.getNeighbourBlock)(position, blocks, direction));\n};\nexports.getNeighbourBlocks = getNeighbourBlocks;\nconst getAllNeighbourBlocks = (position, blocks) => {\n    return (0, direction_1.getAllDirections)().map(direction => (0, exports.getNeighbourBlock)(position, blocks, direction));\n};\nexports.getAllNeighbourBlocks = getAllNeighbourBlocks;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/utils/block_fetching.ts?");

/***/ }),

/***/ "./src/utils/block_variants.ts":
/*!*************************************!*\
  !*** ./src/utils/block_variants.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAllBlockVariants = exports.getBlockFromAlias = exports.addBlockVariant = void 0;\nconst block_1 = __webpack_require__(/*! ../core/block */ \"./src/core/block.ts\");\nconst BlockAliasMap = new Map();\nconst addBlockVariant = (block) => {\n    BlockAliasMap.set((0, block_1.getBlockName)(block), block);\n};\nexports.addBlockVariant = addBlockVariant;\nconst getBlockFromAlias = (alias) => {\n    return BlockAliasMap.get(alias);\n};\nexports.getBlockFromAlias = getBlockFromAlias;\nconst getAllBlockVariants = () => {\n    return Array.from(BlockAliasMap.values()).reverse();\n};\nexports.getAllBlockVariants = getAllBlockVariants;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/utils/block_variants.ts?");

/***/ }),

/***/ "./src/utils/build_time.ts":
/*!*********************************!*\
  !*** ./src/utils/build_time.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BUILD_TIME = void 0;\nexports.BUILD_TIME = new Date('2024-02-10T15:21:00.595Z');\n\n\n//# sourceURL=webpack://cellular-redstone/./src/utils/build_time.ts?");

/***/ }),

/***/ "./src/utils/create_block.ts":
/*!***********************************!*\
  !*** ./src/utils/create_block.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createBlock = exports.addCreateBlockFunction = void 0;\nconst createBlockFunctions = {};\nconst addCreateBlockFunction = (blockType, blockConstructor) => {\n    createBlockFunctions[blockType] = blockConstructor;\n};\nexports.addCreateBlockFunction = addCreateBlockFunction;\nconst createBlock = (blockType, state) => {\n    const blockConstructor = createBlockFunctions[blockType];\n    if (!blockConstructor) {\n        throw new Error(`Block constructor for block type ${blockType} not implemented`);\n    }\n    return new blockConstructor(state);\n};\nexports.createBlock = createBlock;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/utils/create_block.ts?");

/***/ }),

/***/ "./src/utils/general.ts":
/*!******************************!*\
  !*** ./src/utils/general.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.interpretCastString = exports.snakeCaseToWords = exports.toSnakeCase = exports.downloadFile = exports.now = exports.formatDate = exports.createObjectSubset = exports.invisibleRightPad = exports.zeroPad = exports.hasKey = exports.sleep = exports.debounce = exports.createGlobalValue = exports.createStoredGlobalValue = exports.addClickHandlerWithDragCheck = exports.areObjectsEqual = exports.isEnum = exports._createState = exports.getMissingKeys = exports.zipArrays = void 0;\nconst zipArrays = (arr1, arr2) => {\n    const zippedArray = [];\n    const minLength = Math.min(arr1.length, arr2.length);\n    for (let i = 0; i < minLength; i++) {\n        zippedArray.push([arr1[i], arr2[i]]);\n    }\n    return zippedArray;\n};\nexports.zipArrays = zipArrays;\nconst getMissingKeys = (a, b) => {\n    const missingKeys = [];\n    for (const key in b) {\n        if (b.hasOwnProperty(key) && !a.hasOwnProperty(key)) {\n            missingKeys.push(key);\n        }\n    }\n    return missingKeys;\n};\nexports.getMissingKeys = getMissingKeys;\nconst _createState = (defaultValue, localStorageKey, setCallback = () => { }) => {\n    // Try to get the initial value from local storage, otherwise use the default value\n    const initialValue = localStorage.getItem(localStorageKey) !== null\n        ? JSON.parse(localStorage.getItem(localStorageKey))\n        : defaultValue;\n    setCallback(initialValue);\n    // Internal state variable\n    let state = initialValue;\n    // Return the object with get and set functions\n    return {\n        get: () => state,\n        set: (value) => {\n            // Update the internal state\n            state = value;\n            // Set the value in local storage\n            localStorage.setItem(localStorageKey, JSON.stringify(value));\n            setCallback(value);\n        }\n    };\n};\nexports._createState = _createState;\nconst isEnum = (value, enums) => {\n    return enums.includes(String(value));\n};\nexports.isEnum = isEnum;\nconst areObjectsEqual = (obj1, obj2) => {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const value1 = obj1[key];\n        const value2 = obj2[key];\n        if (typeof value1 === 'object' &&\n            value1 !== null &&\n            typeof value2 === 'object' &&\n            value2 !== null) {\n            if (!(0, exports.areObjectsEqual)(value1, value2)) {\n                return false;\n            }\n        }\n        // Ignore nested objects and functions\n        if ((typeof value1 === 'object' && value1 !== null) ||\n            typeof value1 === 'function') {\n            continue;\n        }\n        if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n};\nexports.areObjectsEqual = areObjectsEqual;\nconst addClickHandlerWithDragCheck = (element, clickCallback, allowedMovementRadiusInPixels) => {\n    let isDragging = false;\n    let startCoordinates = null;\n    const calculateDistance = (x1, y1, x2, y2) => {\n        return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n    };\n    const mouseDownHandler = (event) => {\n        if (event.button !== 0)\n            return; // handle left click only\n        isDragging = false;\n        startCoordinates = { x: event.clientX, y: event.clientY };\n        const mouseMoveHandler = (moveEvent) => {\n            if (event.button !== 0)\n                return; // handle left click only\n            if (startCoordinates &&\n                calculateDistance(moveEvent.clientX, moveEvent.clientY, startCoordinates.x, startCoordinates.y) > allowedMovementRadiusInPixels) {\n                isDragging = true;\n            }\n        };\n        const mouseUpHandler = (event) => {\n            if (event.button !== 0)\n                return; // handle left click only\n            document.removeEventListener('pointermove', mouseMoveHandler);\n            document.removeEventListener('pointerup', mouseUpHandler);\n            if (!isDragging) {\n                // Invoke the callback for a regular click\n                clickCallback(event);\n            }\n        };\n        document.addEventListener('pointermove', mouseMoveHandler);\n        document.addEventListener('pointerup', mouseUpHandler);\n    };\n    element.addEventListener('pointerdown', mouseDownHandler);\n};\nexports.addClickHandlerWithDragCheck = addClickHandlerWithDragCheck;\nconst createStoredGlobalValue = (name, initialValue, formatter = (value) => String(value)) => {\n    let currentValue = initialValue;\n    try {\n        const storage = localStorage.getItem(name);\n        if (storage) {\n            currentValue = JSON.parse(storage);\n        }\n    }\n    catch (error) { }\n    // const valueStorage = new LocalStorageVariable({\n    //   defaultValue: initialValue,\n    //   localStorageKey: name\n    // })\n    // const display = () => `${name}: ${formatter(valueStorage.get())}`\n    const set = (value) => {\n        currentValue = value;\n        localStorage.setItem(name, JSON.stringify(value));\n    };\n    const get = () => {\n        return currentValue;\n    };\n    const display = () => `${name}: ${formatter(get())}`;\n    const state = {\n        get,\n        set,\n        display\n    };\n    return state;\n};\nexports.createStoredGlobalValue = createStoredGlobalValue;\nconst createGlobalValue = (name, initialValue, formatter = (value) => String(value)) => {\n    let currentValue = initialValue;\n    const set = (value) => {\n        currentValue = value;\n        // localStorage.setItem(name, JSON.stringify(value))\n    };\n    const get = () => {\n        return currentValue;\n    };\n    const display = () => `${name}: ${formatter(get())}`;\n    const state = { get, set, display };\n    return state;\n};\nexports.createGlobalValue = createGlobalValue;\nconst debounce = (callback, delay) => {\n    let timeoutId;\n    let isPending = false;\n    return function () {\n        if (isPending) {\n            return;\n        }\n        clearTimeout(timeoutId);\n        isPending = true;\n        timeoutId = setTimeout(() => {\n            callback();\n            isPending = false;\n        }, delay);\n    };\n};\nexports.debounce = debounce;\nconst sleep = (milliseconds) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n};\nexports.sleep = sleep;\nconst hasKey = (obj, key) => {\n    // Check if the value is an object\n    if (typeof obj === 'object' && obj !== null) {\n        // Check if the key exists in the object\n        return key in obj;\n    }\n    return false;\n};\nexports.hasKey = hasKey;\nconst zeroPad = (value, width) => {\n    return value.toString().padStart(width, '0');\n};\nexports.zeroPad = zeroPad;\nconst invisibleRightPad = (value, width) => {\n    return value.padEnd(width, '‎ ');\n};\nexports.invisibleRightPad = invisibleRightPad;\nconst createObjectSubset = (value, keys) => {\n    const subset = {};\n    keys.forEach(key => {\n        if (value.hasOwnProperty(key)) {\n            subset[key] = value[key];\n        }\n    });\n    return subset;\n};\nexports.createObjectSubset = createObjectSubset;\nconst formatDate = (date) => {\n    const pad = (num) => (num < 10 ? '0' + num : num.toString());\n    const day = pad(date.getDate());\n    const month = pad(date.getMonth() + 1);\n    const year = date.getFullYear().toString();\n    const hours = pad(date.getHours());\n    const minutes = pad(date.getMinutes());\n    return `${day}/${month}/${year} ${hours}:${minutes}`;\n};\nexports.formatDate = formatDate;\nconst now = () => Math.floor(performance.now());\nexports.now = now;\nconst downloadFile = (value, fileName) => {\n    const blob = new Blob([value], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n};\nexports.downloadFile = downloadFile;\nconst toSnakeCase = (input) => {\n    return input.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n};\nexports.toSnakeCase = toSnakeCase;\nconst snakeCaseToWords = (input) => {\n    return input\n        .split('_')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n};\nexports.snakeCaseToWords = snakeCaseToWords;\nconst interpretCastString = (input) => {\n    const parsedNumber = Number(input);\n    if (!isNaN(parsedNumber)) {\n        return parsedNumber;\n    }\n    else if (input.toLowerCase() === 'true') {\n        return true;\n    }\n    else if (input.toLowerCase() === 'false') {\n        return false;\n    }\n    else {\n        return input;\n    }\n};\nexports.interpretCastString = interpretCastString;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/utils/general.ts?");

/***/ }),

/***/ "./src/utils/save.ts":
/*!***************************!*\
  !*** ./src/utils/save.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocalStorageVariable = exports.decompressObject = exports.compressObject = exports.bytesToBase64 = exports.base64ToBytes = exports.getLocalStorageKeys = void 0;\nconst pako_1 = __webpack_require__(/*! pako */ \"./node_modules/pako/index.js\");\nfunction getLocalStorageKeys() {\n    // Get the number of items in local storage\n    const numberOfItems = localStorage.length;\n    // Create an array to store the keys\n    const keys = [];\n    // Loop through local storage and store the keys\n    for (let i = 0; i < numberOfItems; i++) {\n        const key = localStorage.key(i);\n        if (key !== null) {\n            keys.push(key);\n        }\n    }\n    // The 'keys' array now contains all the keys in local storage\n    return keys;\n}\nexports.getLocalStorageKeys = getLocalStorageKeys;\n// https://developer.mozilla.org/en-US/docs/Glossary/Base64\nfunction base64ToBytes(base64) {\n    const binString = atob(base64);\n    return Uint8Array.from(binString, m => m.codePointAt(0));\n}\nexports.base64ToBytes = base64ToBytes;\nfunction bytesToBase64(bytes) {\n    const binString = String.fromCodePoint(...bytes);\n    return btoa(binString);\n}\nexports.bytesToBase64 = bytesToBase64;\nfunction compressObject(obj) {\n    const jsonString = JSON.stringify(obj);\n    const bytes = new TextEncoder().encode(jsonString);\n    const compressedBytes = (0, pako_1.deflate)(bytes);\n    const base64 = bytesToBase64(compressedBytes);\n    return base64;\n}\nexports.compressObject = compressObject;\nfunction decompressObject(base64) {\n    const compressedBytes = base64ToBytes(base64);\n    const bytes = (0, pako_1.inflate)(compressedBytes);\n    const jsonString = new TextDecoder().decode(bytes);\n    const obj = JSON.parse(jsonString);\n    return obj;\n}\nexports.decompressObject = decompressObject;\n// localStorageKey: string,\n// defaultValue: T,\n// saveInterval: number = 5000,\n// validator: (value: T) => boolean = () => true,\n// valueToStorage: (value: T) => string = JSON.stringify,\n// storageToValue: (storage: string) => T = JSON.parse,\n// setCallback: (value: T) => void = () => {}\nclass LocalStorageVariable {\n    value;\n    localStorageKey;\n    saveInterval;\n    intervalId;\n    setCallback;\n    valueToStorage;\n    saveCallback;\n    constructor({ defaultValue, localStorageKey, saveInterval = 5000, validator = value => value !== undefined, valueToStorage = JSON.stringify, storageToValue = JSON.parse, setCallback = () => { }, saveCallback = () => { } }) {\n        this.setCallback = setCallback;\n        this.value = defaultValue;\n        this.saveInterval = saveInterval;\n        this.valueToStorage = valueToStorage;\n        this.saveCallback = saveCallback;\n        this.localStorageKey = localStorageKey;\n        let usedLocalStorage = false;\n        try {\n            const rawStorageValue = localStorageKey\n                ? localStorage.getItem(localStorageKey)\n                : null;\n            if (rawStorageValue !== null) {\n                const storageValue = storageToValue(rawStorageValue);\n                if (validator(storageValue)) {\n                    this.set(storageValue);\n                    usedLocalStorage = true;\n                }\n                else {\n                    console.warn(`Value in storage '${localStorageKey}' failed validation. Reverting to default value.`);\n                }\n            }\n        }\n        catch (error) {\n            console.warn(`Value in storage '${localStorageKey}' could not be parsed. Reverting to default value.`);\n        }\n        if (!usedLocalStorage) {\n            this.set(defaultValue);\n        }\n        if (localStorageKey && saveInterval > 0) {\n            this.intervalId = setInterval(() => {\n                this.save();\n            }, saveInterval);\n        }\n    }\n    save() {\n        const storedValue = this.valueToStorage(this.value);\n        if (this.localStorageKey) {\n            localStorage.setItem(this.localStorageKey, storedValue);\n        }\n        this.saveCallback(this.value, storedValue);\n    }\n    destructor() {\n        clearInterval(this.intervalId);\n    }\n    get() {\n        return this.value;\n    }\n    set(value) {\n        this.value = value;\n        if (this.saveInterval === 0) {\n            this.save();\n        }\n        this.setCallback(value);\n    }\n}\nexports.LocalStorageVariable = LocalStorageVariable;\n\n\n//# sourceURL=webpack://cellular-redstone/./src/utils/save.ts?");

/***/ }),

/***/ "./src/images sync \\.png$":
/*!**********************************************!*\
  !*** ./src/images/ sync nonrecursive \.png$ ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var map = {\n\t\"./combinedImage.png\": \"./src/images/combinedImage.png\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src/images sync \\\\.png$\";\n\n//# sourceURL=webpack://cellular-redstone/./src/images/_sync_nonrecursive_\\.png$?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;